{"version":3,"sources":["turbopack:///[project]/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport type { IncomingMessage, ServerResponse } from 'node:http'\n\nimport {\n  AppPageRouteModule,\n  type AppPageRouteHandlerContext,\n} from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\n\nimport { RouteKind } from '../../server/route-kind' with { 'turbopack-transition': 'next-server-utility' }\n\nimport { getRevalidateReason } from '../../server/instrumentation/utils'\nimport { getTracer, SpanKind, type Span } from '../../server/lib/trace/tracer'\nimport { getRequestMeta } from '../../server/request-meta'\nimport { BaseServerSpan } from '../../server/lib/trace/constants'\nimport { interopDefault } from '../../server/app-render/interop-default'\nimport { stripFlightHeaders } from '../../server/app-render/strip-flight-headers'\nimport { NodeNextRequest, NodeNextResponse } from '../../server/base-http/node'\nimport { checkIsAppPPREnabled } from '../../server/lib/experimental/ppr'\nimport {\n  getFallbackRouteParams,\n  type FallbackRouteParams,\n} from '../../server/request/fallback-params'\nimport { setReferenceManifestsSingleton } from '../../server/app-render/encryption-utils'\nimport {\n  isHtmlBotRequest,\n  shouldServeStreamingMetadata,\n} from '../../server/lib/streaming-metadata'\nimport { createServerModuleMap } from '../../server/app-render/action-utils'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { getIsPossibleServerAction } from '../../server/lib/server-action-request-meta'\nimport {\n  RSC_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n} from '../../client/components/app-router-headers'\nimport { getBotType, isBot } from '../../shared/lib/router/utils/is-bot'\nimport {\n  CachedRouteKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type ResponseCacheEntry,\n  type ResponseGenerator,\n} from '../../server/response-cache'\nimport { FallbackMode, parseFallbackField } from '../../lib/fallback'\nimport RenderResult from '../../server/render-result'\nimport {\n  CACHE_ONE_YEAR,\n  HTML_CONTENT_TYPE_HEADER,\n  NEXT_CACHE_TAGS_HEADER,\n} from '../../lib/constants'\nimport type { CacheControl } from '../../server/lib/cache-control'\nimport { ENCODED_TAGS } from '../../server/stream-utils/encoded-tags'\nimport { sendRenderResult } from '../../server/send-payload'\nimport { NoFallbackError } from '../../shared/lib/no-fallback-error.external'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nimport GlobalError from 'VAR_MODULE_GLOBAL_ERROR' with { 'turbopack-transition': 'next-server-utility' }\n\nexport { GlobalError }\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: (id: string | number) => unknown\ndeclare const __next_app_load_chunk__: (id: string | number) => Promise<unknown>\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nimport * as entryBase from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\n\nexport * from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n  distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n  relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n})\n\nexport async function handler(\n  req: IncomingMessage,\n  res: ServerResponse,\n  ctx: {\n    waitUntil: (prom: Promise<void>) => void\n  }\n) {\n  let srcPage = 'VAR_DEFINITION_PAGE'\n\n  // turbopack doesn't normalize `/index` in the page name\n  // so we need to to process dynamic routes properly\n  // TODO: fix turbopack providing differing value from webpack\n  if (process.env.TURBOPACK) {\n    srcPage = srcPage.replace(/\\/index$/, '') || '/'\n  } else if (srcPage === '/index') {\n    // we always normalize /index specifically\n    srcPage = '/'\n  }\n  const multiZoneDraftMode = process.env\n    .__NEXT_MULTI_ZONE_DRAFT_MODE as any as boolean\n\n  const initialPostponed = getRequestMeta(req, 'postponed')\n  // TODO: replace with more specific flags\n  const minimalMode = getRequestMeta(req, 'minimalMode')\n\n  const prepareResult = await routeModule.prepare(req, res, {\n    srcPage,\n    multiZoneDraftMode,\n  })\n\n  if (!prepareResult) {\n    res.statusCode = 400\n    res.end('Bad Request')\n    ctx.waitUntil?.(Promise.resolve())\n    return null\n  }\n\n  const {\n    buildId,\n    query,\n    params,\n    parsedUrl,\n    pageIsDynamic,\n    buildManifest,\n    nextFontManifest,\n    reactLoadableManifest,\n    serverActionsManifest,\n    clientReferenceManifest,\n    subresourceIntegrityManifest,\n    prerenderManifest,\n    isDraftMode,\n    resolvedPathname,\n    revalidateOnlyGenerated,\n    routerServerContext,\n    nextConfig,\n    interceptionRoutePatterns,\n  } = prepareResult\n\n  const pathname = parsedUrl.pathname || '/'\n  const normalizedSrcPage = normalizeAppPath(srcPage)\n\n  let { isOnDemandRevalidate } = prepareResult\n\n  const prerenderInfo = routeModule.match(pathname, prerenderManifest)\n  const isPrerendered = !!prerenderManifest.routes[resolvedPathname]\n\n  let isSSG = Boolean(\n    prerenderInfo ||\n      isPrerendered ||\n      prerenderManifest.routes[normalizedSrcPage]\n  )\n\n  const userAgent = req.headers['user-agent'] || ''\n  const botType = getBotType(userAgent)\n  const isHtmlBot = isHtmlBotRequest(req)\n\n  /**\n   * If true, this indicates that the request being made is for an app\n   * prefetch request.\n   */\n  const isPrefetchRSCRequest =\n    getRequestMeta(req, 'isPrefetchRSCRequest') ??\n    req.headers[NEXT_ROUTER_PREFETCH_HEADER] === '1' // exclude runtime prefetches, which use '2'\n\n  // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n\n  const isRSCRequest =\n    getRequestMeta(req, 'isRSCRequest') ?? Boolean(req.headers[RSC_HEADER])\n\n  const isPossibleServerAction = getIsPossibleServerAction(req)\n\n  /**\n   * If the route being rendered is an app page, and the ppr feature has been\n   * enabled, then the given route _could_ support PPR.\n   */\n  const couldSupportPPR: boolean = checkIsAppPPREnabled(\n    nextConfig.experimental.ppr\n  )\n\n  // When enabled, this will allow the use of the `?__nextppronly` query to\n  // enable debugging of the static shell.\n  const hasDebugStaticShellQuery =\n    process.env.__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING === '1' &&\n    typeof query.__nextppronly !== 'undefined' &&\n    couldSupportPPR\n\n  // When enabled, this will allow the use of the `?__nextppronly` query\n  // to enable debugging of the fallback shell.\n  const hasDebugFallbackShellQuery =\n    hasDebugStaticShellQuery && query.__nextppronly === 'fallback'\n\n  // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n  // prerender manifest and this is an app page.\n  const isRoutePPREnabled: boolean =\n    couldSupportPPR &&\n    ((\n      prerenderManifest.routes[normalizedSrcPage] ??\n      prerenderManifest.dynamicRoutes[normalizedSrcPage]\n    )?.renderingMode === 'PARTIALLY_STATIC' ||\n      // Ideally we'd want to check the appConfig to see if this page has PPR\n      // enabled or not, but that would require plumbing the appConfig through\n      // to the server during development. We assume that the page supports it\n      // but only during development.\n      (hasDebugStaticShellQuery &&\n        (routeModule.isDev === true ||\n          routerServerContext?.experimentalTestProxy === true)))\n\n  const isDebugStaticShell: boolean =\n    hasDebugStaticShellQuery && isRoutePPREnabled\n\n  // We should enable debugging dynamic accesses when the static shell\n  // debugging has been enabled and we're also in development mode.\n  const isDebugDynamicAccesses =\n    isDebugStaticShell && routeModule.isDev === true\n\n  const isDebugFallbackShell = hasDebugFallbackShellQuery && isRoutePPREnabled\n\n  // If we're in minimal mode, then try to get the postponed information from\n  // the request metadata. If available, use it for resuming the postponed\n  // render.\n  const minimalPostponed = isRoutePPREnabled ? initialPostponed : undefined\n\n  // If PPR is enabled, and this is a RSC request (but not a prefetch), then\n  // we can use this fact to only generate the flight data for the request\n  // because we can't cache the HTML (as it's also dynamic).\n  const isDynamicRSCRequest =\n    isRoutePPREnabled && isRSCRequest && !isPrefetchRSCRequest\n\n  // Need to read this before it's stripped by stripFlightHeaders. We don't\n  // need to transfer it to the request meta because it's only read\n  // within this function; the static segment data should have already been\n  // generated, so we will always either return a static response or a 404.\n  const segmentPrefetchHeader = getRequestMeta(req, 'segmentPrefetchRSCRequest')\n\n  // TODO: investigate existing bug with shouldServeStreamingMetadata always\n  // being true for a revalidate due to modifying the base-server this.renderOpts\n  // when fixing this to correct logic it causes hydration issue since we set\n  // serveStreamingMetadata to true during export\n  let serveStreamingMetadata = !userAgent\n    ? true\n    : shouldServeStreamingMetadata(userAgent, nextConfig.htmlLimitedBots)\n\n  if (isHtmlBot && isRoutePPREnabled) {\n    isSSG = false\n    serveStreamingMetadata = false\n  }\n\n  // In development, we always want to generate dynamic HTML.\n  let supportsDynamicResponse: boolean =\n    // If we're in development, we always support dynamic HTML, unless it's\n    // a data request, in which case we only produce static HTML.\n    routeModule.isDev === true ||\n    // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isSSG ||\n    // If this request has provided postponed data, it supports dynamic\n    // HTML.\n    typeof initialPostponed === 'string' ||\n    // If this is a dynamic RSC request, then this render supports dynamic\n    // HTML (it's dynamic).\n    isDynamicRSCRequest\n\n  // When html bots request PPR page, perform the full dynamic rendering.\n  const shouldWaitOnAllReady = isHtmlBot && isRoutePPREnabled\n\n  let ssgCacheKey: string | null = null\n  if (\n    !isDraftMode &&\n    isSSG &&\n    !supportsDynamicResponse &&\n    !isPossibleServerAction &&\n    !minimalPostponed &&\n    !isDynamicRSCRequest\n  ) {\n    ssgCacheKey = resolvedPathname\n  }\n\n  // the staticPathKey differs from ssgCacheKey since\n  // ssgCacheKey is null in dev since we're always in \"dynamic\"\n  // mode in dev to bypass the cache, but we still need to honor\n  // dynamicParams = false in dev mode\n  let staticPathKey = ssgCacheKey\n  if (!staticPathKey && routeModule.isDev) {\n    staticPathKey = resolvedPathname\n  }\n\n  // If this is a request for an app path that should be statically generated\n  // and we aren't in the edge runtime, strip the flight headers so it will\n  // generate the static response.\n  if (\n    !routeModule.isDev &&\n    !isDraftMode &&\n    isSSG &&\n    isRSCRequest &&\n    !isDynamicRSCRequest\n  ) {\n    stripFlightHeaders(req.headers)\n  }\n\n  const ComponentMod = {\n    ...entryBase,\n    tree,\n    pages,\n    GlobalError,\n    handler,\n    routeModule,\n    __next_app__,\n  }\n\n  // Before rendering (which initializes component tree modules), we have to\n  // set the reference manifests to our global store so Server Action's\n  // encryption util can access to them at the top level of the page module.\n  if (serverActionsManifest && clientReferenceManifest) {\n    setReferenceManifestsSingleton({\n      page: srcPage,\n      clientReferenceManifest,\n      serverActionsManifest,\n      serverModuleMap: createServerModuleMap({\n        serverActionsManifest,\n      }),\n    })\n  }\n\n  const method = req.method || 'GET'\n  const tracer = getTracer()\n  const activeSpan = tracer.getActiveScopeSpan()\n\n  try {\n    const varyHeader = routeModule.getVaryHeader(\n      resolvedPathname,\n      interceptionRoutePatterns\n    )\n    res.setHeader('Vary', varyHeader)\n    const invokeRouteModule = async (\n      span: Span | undefined,\n      context: AppPageRouteHandlerContext\n    ) => {\n      const nextReq = new NodeNextRequest(req)\n      const nextRes = new NodeNextResponse(res)\n\n      // TODO: adapt for putting the RDC inside the postponed data\n      // If we're in dev, and this isn't a prefetch or a server action,\n      // we should seed the resume data cache.\n      if (process.env.NODE_ENV === 'development') {\n        if (\n          nextConfig.experimental.cacheComponents &&\n          !isPrefetchRSCRequest &&\n          !context.renderOpts.isPossibleServerAction\n        ) {\n          const warmup = await routeModule.warmup(nextReq, nextRes, context)\n\n          // If the warmup is successful, we should use the resume data\n          // cache from the warmup.\n          if (warmup.metadata.renderResumeDataCache) {\n            context.renderOpts.renderResumeDataCache =\n              warmup.metadata.renderResumeDataCache\n          }\n        }\n      }\n\n      return routeModule.render(nextReq, nextRes, context).finally(() => {\n        if (!span) return\n\n        span.setAttributes({\n          'http.status_code': res.statusCode,\n          'next.rsc': false,\n        })\n\n        const rootSpanAttributes = tracer.getRootSpanAttributes()\n        // We were unable to get attributes, probably OTEL is not enabled\n        if (!rootSpanAttributes) {\n          return\n        }\n\n        if (\n          rootSpanAttributes.get('next.span_type') !==\n          BaseServerSpan.handleRequest\n        ) {\n          console.warn(\n            `Unexpected root span type '${rootSpanAttributes.get(\n              'next.span_type'\n            )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n          )\n          return\n        }\n\n        const route = rootSpanAttributes.get('next.route')\n        if (route) {\n          const name = `${method} ${route}`\n\n          span.setAttributes({\n            'next.route': route,\n            'http.route': route,\n            'next.span_name': name,\n          })\n          span.updateName(name)\n        } else {\n          span.updateName(`${method} ${req.url}`)\n        }\n      })\n    }\n\n    const doRender = async ({\n      span,\n      postponed,\n      fallbackRouteParams,\n    }: {\n      span?: Span\n      /**\n       * The postponed data for this render. This is only provided when resuming\n       * a render that has been postponed.\n       */\n      postponed: string | undefined\n\n      /**\n       * The unknown route params for this render.\n       */\n      fallbackRouteParams: FallbackRouteParams | null\n    }): Promise<ResponseCacheEntry> => {\n      const context: AppPageRouteHandlerContext = {\n        query,\n        params,\n        page: normalizedSrcPage,\n        sharedContext: {\n          buildId,\n        },\n        serverComponentsHmrCache: getRequestMeta(\n          req,\n          'serverComponentsHmrCache'\n        ),\n        fallbackRouteParams,\n        renderOpts: {\n          App: () => null,\n          Document: () => null,\n          pageConfig: {},\n          ComponentMod,\n          Component: interopDefault(ComponentMod),\n\n          params,\n          routeModule,\n          page: srcPage,\n          postponed,\n          shouldWaitOnAllReady,\n          serveStreamingMetadata,\n          supportsDynamicResponse:\n            typeof postponed === 'string' || supportsDynamicResponse,\n          buildManifest,\n          nextFontManifest,\n          reactLoadableManifest,\n          subresourceIntegrityManifest,\n          serverActionsManifest,\n          clientReferenceManifest,\n          setIsrStatus: routerServerContext?.setIsrStatus,\n\n          dir:\n            process.env.NEXT_RUNTIME === 'nodejs'\n              ? (require('path') as typeof import('path')).join(\n                  /* turbopackIgnore: true */\n                  process.cwd(),\n                  routeModule.relativeProjectDir\n                )\n              : `${process.cwd()}/${routeModule.relativeProjectDir}`,\n          isDraftMode,\n          isRevalidate: isSSG && !postponed && !isDynamicRSCRequest,\n          botType,\n          isOnDemandRevalidate,\n          isPossibleServerAction,\n          assetPrefix: nextConfig.assetPrefix,\n          nextConfigOutput: nextConfig.output,\n          crossOrigin: nextConfig.crossOrigin,\n          trailingSlash: nextConfig.trailingSlash,\n          previewProps: prerenderManifest.preview,\n          deploymentId: nextConfig.deploymentId,\n          enableTainting: nextConfig.experimental.taint,\n          htmlLimitedBots: nextConfig.htmlLimitedBots,\n          devtoolSegmentExplorer:\n            nextConfig.experimental.devtoolSegmentExplorer,\n          reactMaxHeadersLength: nextConfig.reactMaxHeadersLength,\n\n          multiZoneDraftMode,\n          incrementalCache: getRequestMeta(req, 'incrementalCache'),\n          cacheLifeProfiles: nextConfig.experimental.cacheLife,\n          basePath: nextConfig.basePath,\n          serverActions: nextConfig.experimental.serverActions,\n\n          ...(isDebugStaticShell || isDebugDynamicAccesses\n            ? {\n                nextExport: true,\n                supportsDynamicResponse: false,\n                isStaticGeneration: true,\n                isRevalidate: true,\n                isDebugDynamicAccesses: isDebugDynamicAccesses,\n              }\n            : {}),\n\n          experimental: {\n            isRoutePPREnabled,\n            expireTime: nextConfig.expireTime,\n            staleTimes: nextConfig.experimental.staleTimes,\n            cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n            clientSegmentCache: Boolean(\n              nextConfig.experimental.clientSegmentCache\n            ),\n            clientParamParsing: Boolean(\n              nextConfig.experimental.clientParamParsing\n            ),\n            dynamicOnHover: Boolean(nextConfig.experimental.dynamicOnHover),\n            inlineCss: Boolean(nextConfig.experimental.inlineCss),\n            authInterrupts: Boolean(nextConfig.experimental.authInterrupts),\n            clientTraceMetadata:\n              nextConfig.experimental.clientTraceMetadata || ([] as any),\n          },\n\n          waitUntil: ctx.waitUntil,\n          onClose: (cb) => {\n            res.on('close', cb)\n          },\n          onAfterTaskError: () => {},\n\n          onInstrumentationRequestError: (error, _request, errorContext) =>\n            routeModule.onRequestError(\n              req,\n              error,\n              errorContext,\n              routerServerContext\n            ),\n          err: getRequestMeta(req, 'invokeError'),\n          dev: routeModule.isDev,\n        },\n      }\n\n      const result = await invokeRouteModule(span, context)\n\n      const { metadata } = result\n\n      const {\n        cacheControl,\n        headers = {},\n        // Add any fetch tags that were on the page to the response headers.\n        fetchTags: cacheTags,\n      } = metadata\n\n      if (cacheTags) {\n        headers[NEXT_CACHE_TAGS_HEADER] = cacheTags\n      }\n\n      // Pull any fetch metrics from the render onto the request.\n      ;(req as any).fetchMetrics = metadata.fetchMetrics\n\n      // we don't throw static to dynamic errors in dev as isSSG\n      // is a best guess in dev since we don't have the prerender pass\n      // to know whether the path is actually static or not\n      if (\n        isSSG &&\n        cacheControl?.revalidate === 0 &&\n        !routeModule.isDev &&\n        !isRoutePPREnabled\n      ) {\n        const staticBailoutInfo = metadata.staticBailoutInfo\n\n        const err = new Error(\n          `Page changed from static to dynamic at runtime ${resolvedPathname}${\n            staticBailoutInfo?.description\n              ? `, reason: ${staticBailoutInfo.description}`\n              : ``\n          }` +\n            `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`\n        )\n\n        if (staticBailoutInfo?.stack) {\n          const stack = staticBailoutInfo.stack\n          err.stack = err.message + stack.substring(stack.indexOf('\\n'))\n        }\n\n        throw err\n      }\n\n      return {\n        value: {\n          kind: CachedRouteKind.APP_PAGE,\n          html: result,\n          headers,\n          rscData: metadata.flightData,\n          postponed: metadata.postponed,\n          status: metadata.statusCode,\n          segmentData: metadata.segmentData,\n        } satisfies CachedAppPageValue,\n        cacheControl,\n      } satisfies ResponseCacheEntry\n    }\n\n    const responseGenerator: ResponseGenerator = async ({\n      hasResolved,\n      previousCacheEntry,\n      isRevalidating,\n      span,\n    }) => {\n      const isProduction = routeModule.isDev === false\n      const didRespond = hasResolved || res.writableEnded\n\n      // skip on-demand revalidate if cache is not present and\n      // revalidate-if-generated is set\n      if (\n        isOnDemandRevalidate &&\n        revalidateOnlyGenerated &&\n        !previousCacheEntry &&\n        !minimalMode\n      ) {\n        if (routerServerContext?.render404) {\n          await routerServerContext.render404(req, res)\n        } else {\n          res.statusCode = 404\n          res.end('This page could not be found')\n        }\n        return null\n      }\n\n      let fallbackMode: FallbackMode | undefined\n\n      if (prerenderInfo) {\n        fallbackMode = parseFallbackField(prerenderInfo.fallback)\n      }\n\n      // When serving a HTML bot request, we want to serve a blocking render and\n      // not the prerendered page. This ensures that the correct content is served\n      // to the bot in the head.\n      if (fallbackMode === FallbackMode.PRERENDER && isBot(userAgent)) {\n        if (!isRoutePPREnabled || isHtmlBot) {\n          fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n        }\n      }\n\n      if (previousCacheEntry?.isStale === -1) {\n        isOnDemandRevalidate = true\n      }\n\n      // TODO: adapt for PPR\n      // only allow on-demand revalidate for fallback: true/blocking\n      // or for prerendered fallback: false paths\n      if (\n        isOnDemandRevalidate &&\n        (fallbackMode !== FallbackMode.NOT_FOUND || previousCacheEntry)\n      ) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      if (\n        !minimalMode &&\n        fallbackMode !== FallbackMode.BLOCKING_STATIC_RENDER &&\n        staticPathKey &&\n        !didRespond &&\n        !isDraftMode &&\n        pageIsDynamic &&\n        (isProduction || !isPrerendered)\n      ) {\n        // if the page has dynamicParams: false and this pathname wasn't\n        // prerendered trigger the no fallback handling\n        if (\n          // In development, fall through to render to handle missing\n          // getStaticPaths.\n          (isProduction || prerenderInfo) &&\n          // When fallback isn't present, abort this render so we 404\n          fallbackMode === FallbackMode.NOT_FOUND\n        ) {\n          throw new NoFallbackError()\n        }\n\n        let fallbackResponse: ResponseCacheEntry | null | undefined\n\n        if (isRoutePPREnabled && !isRSCRequest) {\n          const cacheKey =\n            typeof prerenderInfo?.fallback === 'string'\n              ? prerenderInfo.fallback\n              : isProduction\n                ? normalizedSrcPage\n                : null\n\n          // We use the response cache here to handle the revalidation and\n          // management of the fallback shell.\n          fallbackResponse = await routeModule.handleResponse({\n            cacheKey,\n            req,\n            nextConfig,\n            routeKind: RouteKind.APP_PAGE,\n            isFallback: true,\n            prerenderManifest,\n            isRoutePPREnabled,\n            responseGenerator: async () =>\n              doRender({\n                span,\n                // We pass `undefined` as rendering a fallback isn't resumed\n                // here.\n                postponed: undefined,\n                fallbackRouteParams:\n                  // If we're in production or we're debugging the fallback\n                  // shell then we should postpone when dynamic params are\n                  // accessed.\n                  isProduction || isDebugFallbackShell\n                    ? getFallbackRouteParams(normalizedSrcPage)\n                    : null,\n              }),\n            waitUntil: ctx.waitUntil,\n          })\n\n          // If the fallback response was set to null, then we should return null.\n          if (fallbackResponse === null) return null\n\n          // Otherwise, if we did get a fallback response, we should return it.\n          if (fallbackResponse) {\n            // Remove the cache control from the response to prevent it from being\n            // used in the surrounding cache.\n            delete fallbackResponse.cacheControl\n\n            return fallbackResponse\n          }\n        }\n      }\n      // Only requests that aren't revalidating can be resumed. If we have the\n      // minimal postponed data, then we should resume the render with it.\n      const postponed =\n        !isOnDemandRevalidate && !isRevalidating && minimalPostponed\n          ? minimalPostponed\n          : undefined\n\n      // When we're in minimal mode, if we're trying to debug the static shell,\n      // we should just return nothing instead of resuming the dynamic render.\n      if (\n        (isDebugStaticShell || isDebugDynamicAccesses) &&\n        typeof postponed !== 'undefined'\n      ) {\n        return {\n          cacheControl: { revalidate: 1, expire: undefined },\n          value: {\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.EMPTY,\n            pageData: {},\n            headers: undefined,\n            status: undefined,\n          } satisfies CachedPageValue,\n        }\n      }\n\n      // If this is a dynamic route with PPR enabled and the default route\n      // matches were set, then we should pass the fallback route params to\n      // the renderer as this is a fallback revalidation request.\n      const fallbackRouteParams =\n        pageIsDynamic &&\n        isRoutePPREnabled &&\n        (getRequestMeta(req, 'renderFallbackShell') || isDebugFallbackShell)\n          ? getFallbackRouteParams(pathname)\n          : null\n\n      // Perform the render.\n      return doRender({\n        span,\n        postponed,\n        fallbackRouteParams,\n      })\n    }\n\n    const handleResponse = async (span?: Span): Promise<null | void> => {\n      const cacheEntry = await routeModule.handleResponse({\n        cacheKey: ssgCacheKey,\n        responseGenerator: (c) =>\n          responseGenerator({\n            span,\n            ...c,\n          }),\n        routeKind: RouteKind.APP_PAGE,\n        isOnDemandRevalidate,\n        isRoutePPREnabled,\n        req,\n        nextConfig,\n        prerenderManifest,\n        waitUntil: ctx.waitUntil,\n      })\n\n      if (isDraftMode) {\n        res.setHeader(\n          'Cache-Control',\n          'private, no-cache, no-store, max-age=0, must-revalidate'\n        )\n      }\n\n      // In dev, we should not cache pages for any reason.\n      if (routeModule.isDev) {\n        res.setHeader('Cache-Control', 'no-store, must-revalidate')\n      }\n\n      if (!cacheEntry) {\n        if (ssgCacheKey) {\n          // A cache entry might not be generated if a response is written\n          // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n          // have a cache key. If we do have a cache key but we don't end up\n          // with a cache entry, then either Next.js or the application has a\n          // bug that needs fixing.\n          throw new Error('invariant: cache entry required but not generated')\n        }\n        return null\n      }\n\n      if (cacheEntry.value?.kind !== CachedRouteKind.APP_PAGE) {\n        throw new Error(\n          `Invariant app-page handler received invalid cache entry ${cacheEntry.value?.kind}`\n        )\n      }\n\n      const didPostpone = typeof cacheEntry.value.postponed === 'string'\n\n      if (\n        isSSG &&\n        // We don't want to send a cache header for requests that contain dynamic\n        // data. If this is a Dynamic RSC request or wasn't a Prefetch RSC\n        // request, then we should set the cache header.\n        !isDynamicRSCRequest &&\n        (!didPostpone || isPrefetchRSCRequest)\n      ) {\n        if (!minimalMode) {\n          // set x-nextjs-cache header to match the header\n          // we set for the image-optimizer\n          res.setHeader(\n            'x-nextjs-cache',\n            isOnDemandRevalidate\n              ? 'REVALIDATED'\n              : cacheEntry.isMiss\n                ? 'MISS'\n                : cacheEntry.isStale\n                  ? 'STALE'\n                  : 'HIT'\n          )\n        }\n        // Set a header used by the client router to signal the response is static\n        // and should respect the `static` cache staleTime value.\n        res.setHeader(NEXT_IS_PRERENDER_HEADER, '1')\n      }\n      const { value: cachedData } = cacheEntry\n\n      // Coerce the cache control parameter from the render.\n      let cacheControl: CacheControl | undefined\n\n      // If this is a resume request in minimal mode it is streamed with dynamic\n      // content and should not be cached.\n      if (minimalPostponed) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      }\n\n      // If this is in minimal mode and this is a flight request that isn't a\n      // prefetch request while PPR is enabled, it cannot be cached as it contains\n      // dynamic content.\n      else if (\n        minimalMode &&\n        isRSCRequest &&\n        !isPrefetchRSCRequest &&\n        isRoutePPREnabled\n      ) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      } else if (!routeModule.isDev) {\n        // If this is a preview mode request, we shouldn't cache it\n        if (isDraftMode) {\n          cacheControl = { revalidate: 0, expire: undefined }\n        }\n\n        // If this isn't SSG, then we should set change the header only if it is\n        // not set already.\n        else if (!isSSG) {\n          if (!res.getHeader('Cache-Control')) {\n            cacheControl = { revalidate: 0, expire: undefined }\n          }\n        } else if (cacheEntry.cacheControl) {\n          // If the cache entry has a cache control with a revalidate value that's\n          // a number, use it.\n          if (typeof cacheEntry.cacheControl.revalidate === 'number') {\n            if (cacheEntry.cacheControl.revalidate < 1) {\n              throw new Error(\n                `Invalid revalidate configuration provided: ${cacheEntry.cacheControl.revalidate} < 1`\n              )\n            }\n\n            cacheControl = {\n              revalidate: cacheEntry.cacheControl.revalidate,\n              expire: cacheEntry.cacheControl?.expire ?? nextConfig.expireTime,\n            }\n          }\n          // Otherwise if the revalidate value is false, then we should use the\n          // cache time of one year.\n          else {\n            cacheControl = { revalidate: CACHE_ONE_YEAR, expire: undefined }\n          }\n        }\n      }\n\n      cacheEntry.cacheControl = cacheControl\n\n      if (\n        typeof segmentPrefetchHeader === 'string' &&\n        cachedData?.kind === CachedRouteKind.APP_PAGE &&\n        cachedData.segmentData\n      ) {\n        // This is a prefetch request issued by the client Segment Cache. These\n        // should never reach the application layer (lambda). We should either\n        // respond from the cache (HIT) or respond with 204 No Content (MISS).\n\n        // Set a header to indicate that PPR is enabled for this route. This\n        // lets the client distinguish between a regular cache miss and a cache\n        // miss due to PPR being disabled. In other contexts this header is used\n        // to indicate that the response contains dynamic data, but here we're\n        // only using it to indicate that the feature is enabled — the segment\n        // response itself contains whether the data is dynamic.\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '2')\n\n        // Add the cache tags header to the response if it exists and we're in\n        // minimal mode while rendering a static page.\n        const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n        if (minimalMode && isSSG && tags && typeof tags === 'string') {\n          res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n        }\n\n        const matchedSegment = cachedData.segmentData.get(segmentPrefetchHeader)\n        if (matchedSegment !== undefined) {\n          // Cache hit\n          return sendRenderResult({\n            req,\n            res,\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: RenderResult.fromStatic(\n              matchedSegment,\n              RSC_CONTENT_TYPE_HEADER\n            ),\n            cacheControl: cacheEntry.cacheControl,\n          })\n        }\n\n        // Cache miss. Either a cache entry for this route has not been generated\n        // (which technically should not be possible when PPR is enabled, because\n        // at a minimum there should always be a fallback entry) or there's no\n        // match for the requested segment. Respond with a 204 No Content. We\n        // don't bother to respond with 404, because these requests are only\n        // issued as part of a prefetch.\n        res.statusCode = 204\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.EMPTY,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If there's a callback for `onCacheEntry`, call it with the cache entry\n      // and the revalidate options.\n      const onCacheEntry = getRequestMeta(req, 'onCacheEntry')\n      if (onCacheEntry) {\n        const finished = await onCacheEntry(\n          {\n            ...cacheEntry,\n            // TODO: remove this when upstream doesn't\n            // always expect this value to be \"PAGE\"\n            value: {\n              ...cacheEntry.value,\n              kind: 'PAGE',\n            },\n          },\n          {\n            url: getRequestMeta(req, 'initURL'),\n          }\n        )\n        if (finished) {\n          // TODO: maybe we have to end the request?\n          return null\n        }\n      }\n\n      // If the request has a postponed state and it's a resume request we\n      // should error.\n      if (didPostpone && minimalPostponed) {\n        throw new Error(\n          'Invariant: postponed state should not be present on a resume request'\n        )\n      }\n\n      if (cachedData.headers) {\n        const headers = { ...cachedData.headers }\n\n        if (!minimalMode || !isSSG) {\n          delete headers[NEXT_CACHE_TAGS_HEADER]\n        }\n\n        for (let [key, value] of Object.entries(headers)) {\n          if (typeof value === 'undefined') continue\n\n          if (Array.isArray(value)) {\n            for (const v of value) {\n              res.appendHeader(key, v)\n            }\n          } else if (typeof value === 'number') {\n            value = value.toString()\n            res.appendHeader(key, value)\n          } else {\n            res.appendHeader(key, value)\n          }\n        }\n      }\n\n      // Add the cache tags header to the response if it exists and we're in\n      // minimal mode while rendering a static page.\n      const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n      if (minimalMode && isSSG && tags && typeof tags === 'string') {\n        res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n      }\n\n      // If the request is a data request, then we shouldn't set the status code\n      // from the response because it should always be 200. This should be gated\n      // behind the experimental PPR flag.\n      if (cachedData.status && (!isRSCRequest || !isRoutePPREnabled)) {\n        res.statusCode = cachedData.status\n      }\n\n      // Redirect information is encoded in RSC payload, so we don't need to use redirect status codes\n      if (\n        !minimalMode &&\n        cachedData.status &&\n        RedirectStatusCode[cachedData.status] &&\n        isRSCRequest\n      ) {\n        res.statusCode = 200\n      }\n\n      // Mark that the request did postpone.\n      if (didPostpone) {\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '1')\n      }\n\n      // we don't go through this block when preview mode is true\n      // as preview mode is a dynamic request (bypasses cache) and doesn't\n      // generate both HTML and payloads in the same request so continue to just\n      // return the generated payload\n      if (isRSCRequest && !isDraftMode) {\n        // If this is a dynamic RSC request, then stream the response.\n        if (typeof cachedData.rscData === 'undefined') {\n          if (cachedData.postponed) {\n            throw new Error('Invariant: Expected postponed to be undefined')\n          }\n\n          return sendRenderResult({\n            req,\n            res,\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: cachedData.html,\n            // Dynamic RSC responses cannot be cached, even if they're\n            // configured with `force-static` because we have no way of\n            // distinguishing between `force-static` and pages that have no\n            // postponed state.\n            // TODO: distinguish `force-static` from pages with no postponed state (static)\n            cacheControl: isDynamicRSCRequest\n              ? { revalidate: 0, expire: undefined }\n              : cacheEntry.cacheControl,\n          })\n        }\n\n        // As this isn't a prefetch request, we should serve the static flight\n        // data.\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.fromStatic(\n            cachedData.rscData,\n            RSC_CONTENT_TYPE_HEADER\n          ),\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // This is a request for HTML data.\n      let body = cachedData.html\n\n      // If there's no postponed state, we should just serve the HTML. This\n      // should also be the case for a resume request because it's completed\n      // as a server render (rather than a static render).\n      if (!didPostpone || minimalMode || isRSCRequest) {\n        // If we're in test mode, we should add a sentinel chunk to the response\n        // that's between the static and dynamic parts so we can compare the\n        // chunks and add assertions.\n        if (\n          process.env.__NEXT_TEST_MODE &&\n          minimalMode &&\n          isRoutePPREnabled &&\n          body.contentType === HTML_CONTENT_TYPE_HEADER\n        ) {\n          // As we're in minimal mode, the static part would have already been\n          // streamed first. The only part that this streams is the dynamic part\n          // so we should FIRST stream the sentinel and THEN the dynamic part.\n          body.unshift(createPPRBoundarySentinel())\n        }\n\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If we're debugging the static shell or the dynamic API accesses, we\n      // should just serve the HTML without resuming the render. The returned\n      // HTML will be the static shell so all the Dynamic API's will be used\n      // during static generation.\n      if (isDebugStaticShell || isDebugDynamicAccesses) {\n        // Since we're not resuming the render, we need to at least add the\n        // closing body and html tags to create valid HTML.\n        body.push(\n          new ReadableStream({\n            start(controller) {\n              controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n              controller.close()\n            },\n          })\n        )\n\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: { revalidate: 0, expire: undefined },\n        })\n      }\n\n      // If we're in test mode, we should add a sentinel chunk to the response\n      // that's between the static and dynamic parts so we can compare the\n      // chunks and add assertions.\n      if (process.env.__NEXT_TEST_MODE) {\n        body.push(createPPRBoundarySentinel())\n      }\n\n      // This request has postponed, so let's create a new transformer that the\n      // dynamic data can pipe to that will attach the dynamic data to the end\n      // of the response.\n      const transformer = new TransformStream<Uint8Array, Uint8Array>()\n      body.push(transformer.readable)\n\n      // Perform the render again, but this time, provide the postponed state.\n      // We don't await because we want the result to start streaming now, and\n      // we've already chained the transformer's readable to the render result.\n      doRender({\n        span,\n        postponed: cachedData.postponed,\n        // This is a resume render, not a fallback render, so we don't need to\n        // set this.\n        fallbackRouteParams: null,\n      })\n        .then(async (result) => {\n          if (!result) {\n            throw new Error('Invariant: expected a result to be returned')\n          }\n\n          if (result.value?.kind !== CachedRouteKind.APP_PAGE) {\n            throw new Error(\n              `Invariant: expected a page response, got ${result.value?.kind}`\n            )\n          }\n\n          // Pipe the resume result to the transformer.\n          await result.value.html.pipeTo(transformer.writable)\n        })\n        .catch((err) => {\n          // An error occurred during piping or preparing the render, abort\n          // the transformers writer so we can terminate the stream.\n          transformer.writable.abort(err).catch((e) => {\n            console.error(\"couldn't abort transformer\", e)\n          })\n        })\n\n      return sendRenderResult({\n        req,\n        res,\n        generateEtags: nextConfig.generateEtags,\n        poweredByHeader: nextConfig.poweredByHeader,\n        result: body,\n        // We don't want to cache the response if it has postponed data because\n        // the response being sent to the client it's dynamic parts are streamed\n        // to the client on the same request.\n        cacheControl: { revalidate: 0, expire: undefined },\n      })\n    }\n\n    // TODO: activeSpan code path is for when wrapped by\n    // next-server can be removed when this is no longer used\n    if (activeSpan) {\n      await handleResponse(activeSpan)\n    } else {\n      return await tracer.withPropagatedContext(req.headers, () =>\n        tracer.trace(\n          BaseServerSpan.handleRequest,\n          {\n            spanName: `${method} ${req.url}`,\n            kind: SpanKind.SERVER,\n            attributes: {\n              'http.method': method,\n              'http.target': req.url,\n            },\n          },\n          handleResponse\n        )\n      )\n    }\n  } catch (err) {\n    if (!(err instanceof NoFallbackError)) {\n      await routeModule.onRequestError(\n        req,\n        err,\n        {\n          routerKind: 'App Router',\n          routePath: srcPage,\n          routeType: 'render',\n          revalidateReason: getRevalidateReason({\n            isRevalidate: isSSG,\n            isOnDemandRevalidate,\n          }),\n        },\n        routerServerContext\n      )\n    }\n\n    // rethrow so that we can handle serving error page\n    throw err\n  }\n}\n\n// TODO: omit this from production builds, only test builds should include it\n/**\n * Creates a readable stream that emits a PPR boundary sentinel.\n *\n * @returns A readable stream that emits a PPR boundary sentinel.\n */\nfunction createPPRBoundarySentinel() {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(\n        new TextEncoder().encode('<!-- PPR_BOUNDARY_SENTINEL -->')\n      )\n      controller.close()\n    },\n  })\n}\n"],"names":["AppPageRouteModule","RouteKind","getRevalidateReason","getTracer","SpanKind","getRequestMeta","BaseServerSpan","interopDefault","stripFlightHeaders","NodeNextRequest","NodeNextResponse","checkIsAppPPREnabled","getFallbackRouteParams","setReferenceManifestsSingleton","isHtmlBotRequest","shouldServeStreamingMetadata","createServerModuleMap","normalizeAppPath","getIsPossibleServerAction","RSC_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_IS_PRERENDER_HEADER","NEXT_DID_POSTPONE_HEADER","RSC_CONTENT_TYPE_HEADER","getBotType","isBot","CachedRouteKind","FallbackMode","parseFallbackField","RenderResult","CACHE_ONE_YEAR","HTML_CONTENT_TYPE_HEADER","NEXT_CACHE_TAGS_HEADER","ENCODED_TAGS","sendRenderResult","NoFallbackError","tree","pages","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","entryBase","RedirectStatusCode","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree","distDir","process","env","__NEXT_RELATIVE_DIST_DIR","relativeProjectDir","__NEXT_RELATIVE_PROJECT_DIR","handler","req","res","ctx","prerenderManifest","srcPage","TURBOPACK","replace","multiZoneDraftMode","__NEXT_MULTI_ZONE_DRAFT_MODE","initialPostponed","minimalMode","prepareResult","prepare","statusCode","end","waitUntil","Promise","resolve","buildId","query","params","parsedUrl","pageIsDynamic","buildManifest","nextFontManifest","reactLoadableManifest","serverActionsManifest","clientReferenceManifest","subresourceIntegrityManifest","isDraftMode","resolvedPathname","revalidateOnlyGenerated","routerServerContext","nextConfig","interceptionRoutePatterns","normalizedSrcPage","isOnDemandRevalidate","prerenderInfo","match","isPrerendered","routes","isSSG","Boolean","userAgent","headers","botType","isHtmlBot","isPrefetchRSCRequest","isRSCRequest","isPossibleServerAction","couldSupportPPR","experimental","ppr","hasDebugStaticShellQuery","__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING","__nextppronly","hasDebugFallbackShellQuery","isRoutePPREnabled","dynamicRoutes","renderingMode","isDev","experimentalTestProxy","isDebugStaticShell","isDebugDynamicAccesses","isDebugFallbackShell","minimalPostponed","undefined","isDynamicRSCRequest","segmentPrefetchHeader","serveStreamingMetadata","htmlLimitedBots","supportsDynamicResponse","shouldWaitOnAllReady","ssgCacheKey","staticPathKey","ComponentMod","serverModuleMap","method","tracer","activeSpan","getActiveScopeSpan","varyHeader","getVaryHeader","setHeader","invokeRouteModule","span","context","nextReq","nextRes","NODE_ENV","cacheComponents","renderOpts","warmup","metadata","renderResumeDataCache","render","finally","setAttributes","rootSpanAttributes","getRootSpanAttributes","get","handleRequest","console","warn","route","name","updateName","url","doRender","postponed","fallbackRouteParams","sharedContext","serverComponentsHmrCache","App","Document","pageConfig","Component","setIsrStatus","dir","NEXT_RUNTIME","join","cwd","isRevalidate","assetPrefix","nextConfigOutput","output","crossOrigin","trailingSlash","previewProps","preview","deploymentId","enableTainting","taint","devtoolSegmentExplorer","reactMaxHeadersLength","incrementalCache","cacheLifeProfiles","cacheLife","basePath","serverActions","nextExport","isStaticGeneration","expireTime","staleTimes","clientSegmentCache","clientParamParsing","dynamicOnHover","inlineCss","authInterrupts","clientTraceMetadata","onClose","cb","on","onAfterTaskError","onInstrumentationRequestError","error","_request","errorContext","onRequestError","err","dev","result","cacheControl","fetchTags","cacheTags","fetchMetrics","revalidate","staticBailoutInfo","Error","description","stack","message","substring","indexOf","value","html","rscData","flightData","status","segmentData","responseGenerator","hasResolved","previousCacheEntry","isRevalidating","isProduction","didRespond","writableEnded","render404","fallbackMode","fallback","PRERENDER","BLOCKING_STATIC_RENDER","isStale","NOT_FOUND","fallbackResponse","cacheKey","handleResponse","routeKind","isFallback","expire","PAGES","EMPTY","pageData","cacheEntry","cachedData","c","didPostpone","isMiss","getHeader","tags","matchedSegment","generateEtags","poweredByHeader","fromStatic","onCacheEntry","finished","key","Object","entries","Array","isArray","v","appendHeader","toString","body","__NEXT_TEST_MODE","contentType","unshift","createPPRBoundarySentinel","push","ReadableStream","start","controller","enqueue","CLOSED","BODY_AND_HTML","close","transformer","TransformStream","readable","then","pipeTo","writable","catch","abort","e","withPropagatedContext","trace","spanName","SERVER","attributes","routerKind","routePath","routeType","revalidateReason","TextEncoder","encode"],"mappings":"oKAGA,IAAA,EAGO,EAAA,CAAA,AAFLA,CAEK,OAA6D,EAAwB,EAAA,CAAA,CAAA,IAFxE,GAEoF,EAAA,EAAA,CAAtC,AAAsC,AAAjG,CAAiG,KAAZ,EAEjC,EAAwB,EAAA,CAAA,CAAA,OAEnF,EAAoC,EAAA,CAA3BE,AAA2B,CAAA,IAAoC,CAFW,EAInF,EAA+B,EAA2B,CAAjDG,AAAiD,CAAA,KAF9B,EAI5B,EAA+B,CAF2B,CAE3B,CAAtBE,AAAsB,CAJK,AAEb,AAEQ,IAAyC,GAExE,CAJ+B,CAIW,EAAQ,CAAzCE,AAAyC,CAAA,AAF3B,CAE2B,MAElD,CAJ+B,CAOxB,EALwE,AAKxE,CAFLG,AAEK,CAAA,CALiB,EAAEF,IAO1B,EAEEK,AAJ2C,EAKtC,CAAA,AAFLD,CAEK,MADuB,AATY,CAa1C,CAVwB,CAUkB,EAAA,CAAjCI,AAAiC,CAAA,CAHnC,CAFW,CAHX,CAILH,GAaF,EAMO,EAA6B,CALlCW,AAKkC,CAAA,MAlBQ,AAG2C,CAgBvF,EAAyC,EAhBP,AAgBe,CAAxCC,AAAwC,CADb,AACa,CAAoB,AANpD,KAVyB,CAiB1C,EAAyB,AAFlB,CAEAE,CAA8C,AADhC,CACgC,CAD9BD,AAC8B,KAAA,EACrD,EAEEG,EACAC,CAAAA,AAFAF,CACwB,AACxBE,EAAAA,AAJuB,EAID,CALiB,EAQzC,EAA6B,EAAA,CAFtB,AAEsB,AAApBC,CAAoB,AALb,CAKqD,CAJnEF,KAKF,EAAiC,EAA2B,AADvC,CACZG,AAAmD,CAAA,MAD/B,CAE7B,CAJ4B,CAII,EAAA,CAAvBC,AADmD,AAC5B,CAAA,EADP,KAYzB,EAX6E,AAW7E,CAZiC,CAYjC,CAAA,CAAA,CAXwB,GAWiD,GACzE,EAAU,AAZsB,EAYtB,CAAA,CAAA,OACV,EAAc,EAAA,CAAA,CAAA,IAAA,GACd,EAAe,EAAA,CAAA,CAAA,KAAA,EAEf,EAAsB,EAAA,CAAbC,AAAa,CAAA,GAAT,EAAEC,EAEf,EAAwB,CAAjBC,AAFa,CAEmC,CAAA,CAAA,AAFjC,MAEiC,CAAE,EAAwB,EAAA,CAAA,CAAA,CAAzD,KAAgF,EAAA,EAAA,CAAA,CAAA,MAAvB,CAEjF,EAAsB,EAAA,CAAbA,AAAa,CAAA,UAAF,GAAE,KAMtB,IAAA,EAA8B,EAAA,CAAA,CAAA,KAC9B,EAAiC,EAAA,CAAA,CAAA,OAEjC,EAA4B,AAHE,CAGvB,CAAqB,CAAA,CAAA,GAAfC,IACXC,EAASC,CAHsB,CAGtBA,CAAAA,CAAAA,GAAAA,EADiB,EAE1BC,EAAWC,EAAAA,CAAAA,CAAAA,KAAAA,EACZ,EAAA,EAAA,CAAA,CAAA,OAED,EAA2B,EAAA,CAAA,CAA0C,EAAzDC,KAqDU,EAAA,CAAA,CAAA,MArDK,oBAwDnBmC,EAAYC,AAAhBd,CAAgBc,CAAAA,EAAZD,EAAoBE,CAAX,MAAbf,AAA+B,AAAlB,KAAGc,eAAhBd,UAvDJ,IAAA,EAASrB,CAAAA,GAAAA,CAET,QAF2B,CAE3B,CAAA,CAAc,KAFqB,EAErB,KAA4C,KAAA,CAAA,WAAA,CAA8C,EAAC,AAAvB,OAAuB,CAAA,CAAjD,KAAiD,CAEzG,KAJiF,IAIjF,CAAA,WAAA,CACA,EAAA,GACEE,CADK,MAAMD,AACXC,CAAAA,CAAY,CAAA,KAAA,CAAA,IAAA,CADa,CACb,GADiB/C,IAD6B,eACV,0BACpC,QACVgD,CACAE,EACAC,GAFMlD,AAENkD,CADM,AACNA,CAAAA,CAAU,CAAA,MAFMF,CAGhB,EACAG,GAAAA,CAAAA,CAJwB,AAIxBA,EAAAA,CAAY,MACZC,EACAC,GAAAA,CAAAA,EAAU,CAAA,AAAE,CADF,KACE,CAAA,IAAA,EAAA,KAH+B,gCAG/B,IACd,CACAC,MACEC,GAAAA,CADQ,AACRA,GAAYpB,EAAAA,CACd,MAAA,GAAA,CAAA,CACAqB,IAASC,CAAAA,EAAAA,EAAYE,EAAJD,GAAG,CAACC,aAAAA,EAAAA,KAAAA,MAAAA,EAAwB,EAAA,AAAI,IAAA,CAAA,eAAA,CAAA,CAAA,EAAA,EAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CACjDC,MAAAA,CAAAA,EAAAA,EAAgCC,IAAZJ,GAAYI,CAAAA,IAAJH,CAAIG,CAAAA,CAAD,AAACA,CAAAA,CAAAA,EAA+B,OAAA,AAAJ,CAAI,GAAA,GAAA,CAAA,CAAA,CAC/D,KAAA,CAAA,YAAA,CAAA,AAEF,CAAO,CAAA,GAOL,CA6GIK,CA7GAC,KAAAA,CAAAA,CAAU,EAPML,CAON,EAAA,KANdC,GAAoB,EACpBC,GAAmB,EACnBC,GAEC,aAEa,GAEd,UAAA,CAAA,IAAA,EAAA,EAAwD,wEAAA,GACxD,QAAA,CAAA,IAAA,EAAmD,0EAAA,GACnD,WAAA,CAAA,IAAA,EAAA,IAA6D,yEAAA,GAC7D,IAAIR,QAAQC,CAAAA,CAAG,CAACU,GAAAA,EAAW,EAAF,EAAE,yEAAA,GAE3B,EAAO,CAAID,EAAJ,AADLA,UAAUA,AACW,QADHE,EACa,KADN,CAAC,YAAY,OAAO,CACd,CAQjC,EAAA,EAAyC,CAAA,CAAA,IAAA,CAAA,GACzC,EAAoBjE,EADqB,AACnCqE,AAAkC,CAAA,CAAA,GAALV,CAAK,CAAA,GAAA,AAElCW,EAAgB,EAFFtE,EAEQyC,CAC1BsB,IAAAA,EADoB,IAEpBG,CAFsCK,KAEtCL,EAF6C,CAACP,AAkC1CmC,EA/BN,AA+BMA,GAlC+ClC,AAkC3BhD,CAAAA,EAAiBmD,EAlCe,YAkCfA,IAAAA,CAAAA,CAE3C,IAAI,EAAEgC,KAAAA,CAEN,EAAMC,GAAAA,EAAAA,MAFoB,EAAE,CAEtBA,CAAAA,CAFyB1B,CAET7B,MAAAA,CACtB,EAAMyD,GAD4BD,AAC5BC,KADiC,CAACpD,MAClB,CAAC,CAACgB,EAD0BA,WAG9CsC,KAFsCD,GAE9BE,CAAAA,EAFoC,CAACZ,GAG/CO,cAHgE,EASlE,CALIE,CAKEM,SAAUrF,GAChB,EAAMsF,EALF3C,IAIuBwC,CACrBG,GAEN,CAFkBhG,QAElB,CAPsB0F,CAOtB,KAP4B,CAACL,CAKMnC,KAMnC,IAAM+C,OAAAA,CAXyC,EAe/C,QAAA,CAAA,GAHE1G,IAKF,IAFA,EAEM2G,KALWhD,KAAK,GAMmB0C,CADnCM,CACJ3G,GAA+C2D,AAIjD,CAFA,GAFqD4C,GAE/CK,IAFsD,CAA3CjD,AAA4C7C,GAI7D,EAJsB,AAItB,CAPuF,AAOvF,CAAA,AATE6C,CASF,CAAA,CAAA,CATM4C,AAKkE,OAL3D,CAACxF,CAOiBF,0BAA0B8C,CAPf,IAwB1C,CAxB+C,CAwB/C,EAAA,CAxBmD,MAwBnD,CAAA,WAAA,KAAA,IAcI,IAAA,EAAA,CAAA,EAAA,EAAA,MAdkE,AAxByB,QAsC3F,EAAA,EAAA,aAEA,EAAA,CAAA,EAAA,EAA+B,OAFyC,EAEzC,KAAA,EAAA,EAAA,eAC9BqD,EAAAA,MACEvE,CAAAA,CAAAA,CAAY8E,KAAK,CAAA,CAAA,EAAK,CAAA,CAAA,CACrB5B,CAAAA,OAER,EAAM8B,AAGN,mBAdI3D,CAAAA,CAYFkD,AAGF,GACA,GAAA,CAAA,CAAMU,CAON,AAdQ/B,MAcE,CAJV,EAAMgC,IAHAD,MAJwBN,AAOxBO,CAAAA,AAVuBH,IAQ3BC,AAIF,EAAA,EAF6BN,CAE7B,CAAA,IAPoE,OALlB,IAalD,CALwB1E,CAR+B,IAavD,AAb0D,CAa1D,AAb4D,CAa5D,GAPiE,CAOjE,CALoC8E,AAEuBH,IAG3D,CALyC,CAKzC,EAAA,EAL8C,OAK9C,CAAA,IAAA,CAAA,EAAA,QAAA,EAD2E,CACH,IAAA,IAC9D,KAGV,GAAA,CAAA,SAAA,OAAA,CAAA,QAAA,CAAA,WAAA,CAAA,eAAA,CAAA,eAAA,CAAA,kBAAA,CAA0E,uBAAA,CAAA,uBAAA,CAAA,yBAAA,CAAA,8BAAA,CAAA,mBAAA,CAAA,aAAA,CAAA,kBAAA,CAAA,yBAAA,EAAA,qBAAA,EAAA,YAAA,EAAA,2BAAA,EAAA,CAAA,CAAA,EAC1E,GAAA,EAAA,QAAA,EAAA,IACA,GAAA,CAAA,EAAA,EAAA,gBAAA,EAAA,GACA,AAFwE,YACd,UACpDU,EAAAA,CACJV,CAAAA,EAEF,GAAA,EAAA,KAAA,CAAA,GAAA,EAFuBT,CAGvB,GAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAHuC,CAG0B,AAHzBD,CAIxC,GAFyE,CAEzE,EAAA,IAAA,GADiE,CACjE,EAAA,CAAyE,KAAA,CAAA,GAAA,EACzE,GAAA,EAAA,OAAA,CAAA,aAAA,EAAA,GACMqB,GAAAA,CAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAwB/H,AAD2C,CAGzE,GAAA,CAAA,EAAA,EAAA,MAF6C2D,KAAK,KAElD,EAAA,GAIIqE,GAA0B1B,CAAAA,EAAAA,EAC1B,SAAA,IADyB,CAACA,AAC1B,EAAA,EACA5F,CAAAA,SANsE,eAMJ,IAAA,EAArC4F,EAAAA,OAAWV,CAAAA,EAA0B,QAAfqC,eAAe,IAAA,CAAA,CAIpED,CAJoE,EAIpEA,CAAAA,EAAAA,EAAyB,MAAA,QAAA,EAAA,EAAA,kBAAA,CAAA,EAAA,OAAA,CAAA,EAAA,UAAA,CAAA,CAC3B,GAAA,CAAA,EAAA,EAAA,yBAAA,EAAA,GAoBII,GAdoB,AAcS,CAdT,EAAA,EACtB,EAAA,EAa+B,UAAA,MAb/B,EAAA,GAAA,YAAA,CAAA,GAAA,GAa+B,CAAA,MAAA,GAAA,EAAA,MAAA,CAAA,GAAA,AAbsC,EAatC,EAAA,aAAA,CAAA,GAAA,EAAA,KAAA,EAAA,EAAA,aAAA,IAAA,mBAgB7BC,GAhB6B,GAiB5BA,IA1BK,EA+BV,EANoBD,CAMpB,GAAA,IALsB3F,GAKtB,AANoB2F,EAgBpB,EAfsB3F,CAetB,IAVyE,AAUzE,AAfkC8E,IAelC,CAAA,AAfuC,EAAE,CAqBvCtF,GAAAA,CAAAA,CAtBkBmG,CAsBlBnG,EAAAA,IA/CQ,KA0B+B,AADrBmG,EAzBV,GAyBUA,AAsBlBnG,EAAAA,EA/CQ,AA+CRA,CAtBkBmG,KAzBV,AASuB,aATvB,KAAA,KAqDV,GAAA,CAAA,IAAA,CAAA,CArDU,CAqDV,EAA0E,GAA1E,oBAA0E,KAAA,EAAA,GAAA,GAAA,eAAA,EAC1E,IAAA,KACA,IAAA,EACI/C,IAAyBC,IAF7B,OAKIA,AAEAiD,GAAiB5H,GAAjB4H,EAAiB5H,GAAjB4H,CAAAA,EALkD,IAStD,GAFI,EAAA,EAFuC,CAP0B,EAWrE,EAAA,AALIlD,KAKJ,GAGA,GAGI,GAHEoD,AAGF,CAhBsE,GAgBtE,GACF,EAJa3I,CAIP8I,GAAAA,CAINhF,CAAAA,AAJmBnB,GAIfqG,CAAU,IAAQF,EAAAA,EAJSC,AAIlB,AAASD,CAAR,AAAQA,GAAAA,EAfmB,EAenBA,IAhBpBvD,CAY0C,AAK5C,CAJEI,EAIIsD,CAAoB,EAdxB,AAcIA,EACJC,EAFoBJ,CAAAA,EAAAA,AAWRtF,CARZ2F,AAQA,CAVwB,CADJL,AAWL,AAtBnB,CAsBoBQ,CAAZ/F,CAbJwC,EAeID,EAAWkB,CADb,CADsB,CAETA,EAAXlB,AAAuB,CAACyD,CAAAA,AAFC,IAMzB,CAAe,CAATE,CAAe9G,EAOrB,IAPA,CAJuC,AAWvC,CAPe,AANyB,CAaxC,EAVA,AAUA,CAPiC8G,AAHhC7C,CAUD,KAPuC,AAOvC,CAPwCwC,GAOxC,MAPiDC,GAQnD,GADE,EATA,CAACF,AAUH,AAR4DA,MAO1D,EATSK,IAUX,EAAA,EAAA,EAVqB,CAAC1C,IAUtB,QAGF,CAAOnE,KACD,CADCA,AAAYiH,AACZV,GAAL,AAd4C,EAC1C,CAYqB,AACZ,CADaE,MAGxBF,GAHiCG,EAG5BS,OAHqCX,AAIxC,MADgB,CAAC,EAHgCU,GAKjD,IALwD,CAAC,GAM3D,AAFsB/F,IAAIY,AACZ,UADsB,QAIpC,EACA,IADMqF,OAWF,CAAC,MATL,CAQEI,AAKA,GAbE,CAACJ,EAFsBpB,EAUjByB,EAKR,EALY,CAVoBJ,IAW7B,GAA2B,EAAED,EATT,MAavB,EAAA,EAfqD,GAgBvD,CAAA,GALqDE,GAAG,CAClD,CAX2D,iBAY3D,KAKN,MAAMI,QAAQN,UACd,IAAIM,EACF,GAF+BJ,EACtB,CADyB,AAE5BK,CAF6B,CAE7BA,CAAAA,EAAAA,EAAoBD,EAAb,GAAG3B,OAAO,CAAC,EAAE2B,MAAAA,AAP+C,CAAC,CAOhDA,EAAO,yBAEjCnB,KAAKY,IACH,CAGF,CAAA,IAFE,EAEF,CAJkB,CAIlB,AAJmB,IACHO,MACAA,GAGhBnB,CAAKqB,IAAAA,KAAAA,OAAU,AACV,CADWD,EAClB,AAAO,kBAAA,aAEP,EAAA,GADEpB,KAAKqB,KACP,CAAA,EAAA,EADiB,CAAC,GAEpB,AAFuB7B,OAAO,CAAC,CAE/B,CAFiC7E,AAEjC,IAFqC2G,GAErC,AAFwC,EAAE,CAG5C,IAAA,EAAA,MAAA,EAAA,KAEA,EAAMC,EAAAA,EAAW,IAAO,CAAP,CACfvB,AACAwB,IADI,EACJA,SAAAA,CAAAA,CAAS,EAeHvB,AAdNwB,EAc4C,IAAA,EAAA,WAdzB,EAapB,GAC6C,CAAA,WAiBxCM,CAAW7K,MAAAA,CAAAA,EAAeoI,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,QAE1BvD,CAAAA,EAAAA,SACAtC,EAAAA,WAAAA,CAAAA,CACAI,MAAMkB,aAAAA,EAAAA,UAAAA,CACNyG,YAAAA,KACArC,GACAH,EAAAA,GAAAA,qBAAAA,MAGA9C,CAAAA,EACAC,UAEAI,EAAAA,GAAAA,CAAAA,EAHAL,kBAGAK,EAAAA,cAAAA,CAAAA,aAAAA,CAAAA,YACAF,QAAAA,IAAAA,CAAAA,CAAAA,2BAAAA,EAAAA,EAAAA,GAAAA,CAAAA,kBAAAA,qEAAAA,CAAAA,MAIA4F,EACE5H,CAAAA,CAAwB,CAAhBC,EAAgB,CAAb,AAAa,CAAZ4H,AAAiB,WACzB,AAAC/I,KAMPqD,EAAAA,CANe,AAOf6F,IAAAA,EAAAA,CAAcjF,CAPmC+E,CAOnC/E,GAPuC,AAO9B,CANf,AAMgBoE,EAAAA,EAAAA,CAAAA,CACxBhE,EAAAA,CADqC,CAACsB,WACtCtB,CAAAA,CACAT,EARiC,GACzB1C,QAAQ+H,AAOhBrF,EACAa,CARmB,IACXnE,QAORmE,EACA0E,EARoB9H,OAQPoC,QAAAA,CACb2F,CADwBD,CARc,CAUtCG,EAAAA,CARM,GAAGpI,GAM0B,CAEtBuC,EAAAA,CAAAA,CARIwF,CAOCxF,EAPE,EASpB8F,CATuB,CAAC,AAQAD,AAExBE,CADAD,CAT0BjJ,AAU1BkJ,GAH6BH,MAAM,AACA,AAErB1H,CAAAA,CAAAA,AADC8B,CATuBpC,AAUxBM,EAAAA,GAAAA,CAAAA,EAAAA,EADY4H,AACME,CAAAA,EAAAA,CAAAA,CAAAA,CAAO,EAViB,EAAE,EAc1DI,CALuC,CAGvCF,EAEAE,EAAAA,EADA/D,IACA+D,CAAAA,KAFgBpG,MAEhBoG,CADiBpG,AAEfA,GAAAA,CAHyBkB,OACCmB,KADW,CAAC8D,IAGtCnG,CAH2C,AAGnBoG,CAAAA,EAAblF,CAF8B,OAG3CmF,IADyB,CAGzB/H,AAH0B8H,GAAsB,KAIhDE,EAHuBtG,OAIvBuG,CAAAA,GAJkCF,IAKlCI,CAFkBrM,SACC4F,AACTA,MAFuBjC,CAHsB,EAMvD2I,CADqBD,CAFiB,AACRvF,GAI9B,GAAIW,CAHyB,EAKvB8E,GANoC,CAACH,AAE5BxG,QAIG,CANkC,EAE1BkB,EAIR,CAAA,CAFQY,CAER,EAAA,KAJoB,CAAC4E,QAIrB,EAAA,EAAA,CAJkC,GAGhD,oDAEEpE,EACAsE,GAAAA,KACAnB,IAAAA,OADoB,EACN,AACd3D,EAHyB,GAGzBA,IAAAA,KACF,IACA,CAAC,CAAC,GAFwBA,EAExB,CAAA,eAENZ,OACEM,MAAAA,CADY,AACZA,EAAAA,EAAAA,cAAAA,EAAAA,eACAqF,YAAY7G,EACZ8G,EACArD,CAAAA,MACAsD,AAHuBF,GACX7G,MACKS,CAFgB,IACVS,GACElB,GACLS,MAFe,CAACqG,CACA5F,AAElClB,KAEFgH,IAL8C,EAGjC9F,CAFmC,CAACuC,UAExB,CAACsD,CAENtG,GAJ4C,GAOhEwG,EAFEjH,CAGFkH,QAN4C,EAG/BhG,CAGFT,EADKA,MACGT,CAAAA,AAAuB,CADlBA,AACmBkH,CAHlB,CAACF,OAG0B,EADjB9F,KAChBlB,EAAWkB,CAAsB,CAHR,GAEG,CAAC+F,cAAc,EAE9DE,gBAAgB1G,GAChB2G,KADwBpH,WAAWkB,IAGrC,CADIlB,OAF6C,CAACmH,GAEnCjG,WAFiD,CAErC,CAACkG,MAG5BtI,WAAWb,EAHoC,EAGhCa,EAHqC,EAAE,KAG9B,AACxBuI,SAAS,CAACC,kBAEV,EADEtJ,IAAIuJ,EAAE,CAAC,IACT,KADkBD,CAClB,GAAA,KAAA,EAAA,GAAA,YAAA,CACAE,IAAyB,CAAzBA,OAAyB,MAAP,EAAO,GAAA,CAAA,CAAA,QAAA,GAAA,GAAA,EAAA,SAAA,SAAA,IAAA,UAEzBC,EAOAK,KAAK1N,QAAAA,IAAe2D,CAAAA,CAAAA,AAAK,EAAA,CAAA,GACzBgK,IAR+B,CAACL,AAQ3B7K,OARkC8K,KAQtBhG,KARgCiG,AAQ3B,UACxB,KARI/K,YAAYgL,SASlB,GAEMG,EAX0B,CACxBjK,IAUO,CATP2J,IASavE,GARbyE,AAQazE,OAAkBC,IAAAA,CAE/BQ,CAFqCP,CAPrCtD,MASQ,EAAE,GAAGiI,IAAAA,GAAAA,MAAAA,CAGnBC,YAAY,CACZtH,EAAU,CAAC,CAAC,EACZ,OAAA,CACAuH,GAAWC,SAAS,EACrB,EAAGvE,CAAAA,aAAAA,CAEAuE,OAAW,MAAA,EAAA,OAAA,CACbxH,GAAO,CAAC5E,EAL4D,OAK5DA,GAAAA,EAAuB,GAAGoM,OAAAA,CACpC,eAAA,GAAA,YAAA,CAAA,KAAA,CAEA,gBAAA,GAAA,eAAA,QAA2D,uDAC7CC,QAAY,GAAGxE,SAASwE,EAAAA,GAAY,MAAA,eAAA,CAElD,mBAjWAlK,CAAAA,EAkWA,YAlWkBqC,KAkWlB,CAAA,AAlWwB,CAACL,CAkWzB,EAAA,MAD0D,QAC1D,CAlW2C,CAkW3C,EAAA,CAjWAhC,iBAiWgE,CAjW9CuD,CAkWlB,YAlW+B,CAACvB,KAkWhC,GAAA,UAlWkD,EAkWlD,CAAA,EAAqD,OAAA,CAEnDM,KACAyH,CAAAA,EAtWF/J,AADD,CAuWG+J,GAAAA,EApWDvG,MAoWCuG,CAIA,EAAMK,IAxWM,EAoWZL,IApWiB,EAwWXK,GAAoB1E,IAJZyE,AAIYzE,CAAS0E,OAAAA,CAAAA,CAJX,GAnW1B,GAmW+B,EAIuB,GAHpD,CAACzL,AAGmD,CAEpD,EAAMiL,CAAAA,AAAM,GACT,CAMF,CAPW,EAAA,CALCnG,CAKG4G,IALE,EAMhB,CADU,AACT,CALH,CAAC/G,QAIW,WAHZ,IAIkD,EAAE3B,AADxC,YAAA,GAzWyD,IA2WjEyI,CAAAA,EAFQ,EAOZ,cAAA,EAEIA,iBAPAA,MAOAA,EACF,EAAA,CAAA,CAAMG,CACNX,EAFEQ,EAEEG,CATiBD,EAQPF,EACL,GAAGR,CAAAA,EAAIY,CATgB,IAOXD,AANf,CAAC,CAQgB,GADSA,AADN,AAEAA,EAFE,GACS,CAPpB,AAQeE,CAClC,CATqBL,EAWfR,KAHqC,CAACW,KAGtCX,CAH4Cc,EAG5Cd,EAXiCU,GAQkB,CAAC,IAGpDV,CACR,EAZoD,EAAE,GAC5C,EAAE,EACN,AAUN,GATM,AASN,CATO,WASP,CAAA,UAAA,CAEO,gBAAA,EAAA,GAAA,YAAA,CAAA,eAAA,CACE,GAZ0E,CAAC,GANtE,aAkBL,CAAA,GAAA,IAlBK,QAkBL,CAAA,kBAAA,CACL/K,EAAMtB,gBAAgBuB,EAAAA,CAAQ,GAAA,EAAA,UAAA,CAAA,kBAAA,CAC9B8L,EAAMd,aAAAA,EAAAA,GAAAA,YAAAA,CAAAA,cAAAA,CACNrH,WAAAA,CAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CACAoI,KAASnF,SAASoF,EAAAA,CAAU,GAAA,YAAA,CAAA,cAAA,CAC5BpE,OAAWhB,SAASgB,IAAAA,GAAS,CAAA,WAAA,CAAA,mBAAA,EAAA,EAC7BqE,AAD6B,EAE7BC,MADQtF,IACRsF,EAAatF,GADIhF,IACKsK,EAAAA,CACxB,GAF6B,KACM,AACnC,IACAjB,EAAAA,EAAAA,CAAAA,QAAAA,EACF,EACF,iBAAA,KAAA,EAEMkB,cAAuC,OAAO,EAClDC,OAAAA,CAAAA,EAAW,AACXC,EAAAA,IACAC,CADkB,CAEd,CADJA,CAED,EAFe,EACdlG,QACD,CAAA,EAAA,EAAA,EAAA,IACOmG,IAAAA,CAAAA,EAAAA,EAAe1M,MAAAA,QAAAA,EAAAA,EAAY8E,KAAK,KAAK,KACrC6H,IAAAA,EAAaJ,IAAAA,CAAAA,AAEnB,CACA,EAEEjJ,CALgCnC,CAKhCmC,GALoCsJ,GAKpCtJ,EACAL,EAAAA,GAAAA,AAIA,GAViD,IAOjD,CAACuJ,EAGGtJ,CAAAA,CAAAA,CAAAA,GAP2B,aAQ7B,CAHF,AAGQA,CAHPtB,GANqD,CAS9CsB,IADJA,AACIA,EAAAA,CAAAA,CAAoB2J,CAAAA,AAF5B,IAGA,GADqC,CAAC3L,EAC/B,CAAA,CADoCC,AACpC,CAAA,EAaT,AAf2B0L,OAGvB1L,CACAA,CAAIa,AAJ4B,EAG5BD,AACJZ,AAAQ,AAJ0B,CAI3B,CAAC,CADJY,OAAU,GAAG,SACT,CAAA,CAAA,CAAA,EAKZ,EAAI+K,YAAAA,CAAAA,EAAAA,YAAAA,CAMJ,IAAA,CAAA,MAAA,EAAA,KAAA,EAAA,EAAA,UAAA,IAA0E,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,GAAA,CAC1E,IAAA,EAAA,EAAA,iBAAA,CACA,EAAA,OAAA,GAA0B,OADkD,IAClD,CAAA,MAAA,CAAA,+CAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,EAAA,EAAA,WAAA,EAAA,CAAA,UAAA,EAAA,EAAA,WAAA,CAAA,CAAA,CAAA,EAAA;AAAA,0EAAA,CAAA,EAAA,CAAA,CAAA,kBAAA,CACtBA,MAAAA,MAAiBjO,CACf,CAAC8F,WAD2BqI,AAC3BrI,EACHmI,OAFuC,CACf9I,GADmBrF,GAE3CmO,CACF,AADiBjO,EAFkCgF,CAIrD,CAHuC,EAGvC,OAFgCoJ,CAEhC,AAJiE,KAIjE,EAAA,EAAA,KAAA,CAAA,CAEIT,IAAAA,CAJkD,CAIlDA,EAAAA,GAAAA,EAAAA,CACFlJ,EAAAA,KAAAA,CAAAA,EAAAA,GAAuB,GADD4J,CACC,CAAA,EAAA,GADM,MACN,AADW,CAAC,AACZ,EAAA,CADe,MACf,CAAA,MACzB,CAEA,MAAA,CACA,CACA,MAAA,CAEE5J,GAJoB,GAIpBA,CAGAwJ,KAAAA,EAAejO,GAAAA,MAFdiO,CAAAA,KAEcjO,CAAAA,EAAaoO,GALa,GAKbA,CAC9B,EAHoBpO,GAGpB,EAGG+C,QAV2D,AAMV,AAFnBuL,EAc/B,EAPAL,KAPwC,CAcxC,EAAA,CAd4CN,QAO3B3N,CAOjB,CACA,QAf6D,EAe7D,CAdA,AAM8BoO,CAQ9B,SAAA,CAEE,OAAA,EAH8D,AAG9D,EAVkD,EAQL,EAP/CrH,IASE,CACA,YAAA,AATF,CASoB,AATnB+G,CASmB,WAAA,AACjBD,CAAAA,CATH,CAAC3J,GAO4D,SAI3D+J,EAFiBvJ,CARnBf,GAeA,AAAI4K,GAHF,CACF,AAEIA,EAAAA,GAP2B,AAIvB,EAFWvO,EAEPQ,CAHV,AARDqN,CAAAA,IAcGU,CAAAA,IAL4BD,OATf,CAAC1J,CASuB,EACvC,KAIE2J,CAAAA,IAd0B,GAC9B,SAaIA,CAAAA,MAAAA,CAAAA,CAAAA,OANyD,CAQ7D,EAAA,EAAIzI,AAAsBT,CAAc,MAAdA,CAAD,CAACA,GAAAA,AAoBlBqC,GAnBN,AAAM8G,GACG9J,EAAAA,CADH8J,AACJ,QAAO9J,IAAAA,QAQT6J,AAAmB,IAAkBE,CAAZtN,AAAYsN,EAR5B/J,CAQ0C,AAAC,CAAA,QAAf+J,CACnCD,CADiB,EARKN,CAQ4B,KAClDM,CAAAA,CAT8B,GAS9BA,EAAAA,CATmC,EASnCA,SARI9J,AAQJ8J,EAAAA,IACAnM,EAAAA,GAAAA,GATkB6L,MASlB7L,CAAAA,CAT0B,CAS1BA,EARIwL,IAUJa,UAAAA,CAAWpQ,AATLkG,MAUNmK,EADqBrN,CACrBqN,CAAAA,MAD6B,EACjB,EATN,wBAWN7I,IA8BN,cAzBU,CAAQ,IADR,GACQ,WAAA,EAAA,GAAA,SAAA,MAMN+H,EAAAA,UAAAA,EAAAA,CAAAA,EAAgBxH,OAAAA,EAAAA,AAP0C,CAO1CA,EAAAA,EAAAA,KAAAA,EAAAA,MACZpH,KAER,CAFQA,CAER,CAAA,EAAA,GACSsD,EAAXa,AAAeA,EAAAA,MAHkBoB,IAGlBpB,CAAS,gBAFd,MAEc,GAItBmL,MAAqB,EAAA,CAAzB,IAA+B,AAA3BA,EAA2B,EAAO,CAAA,MAAA,IAAA,CAAA,GAAA,KAEtC,CAAA,OAMSA,GAAP,CAAOA,EAAAA,IAAAA,QAAAA,CAAAA,SAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EACT,EAAA,CAPqE,WAOrE,CAAA,sBAAA,EAEJ,CAAA,GAAA,IAAA,EAAA,YAAA,CAAA,sBAAA,EAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,EAAA,CAAA,CAAA,KAAA,EAGA,EAAMrF,AAYcyD,CANpB,CAAA,AADA,GACA,EAAA,CAAA,EAEGxG,CAAAA,CAI6B,AAX9B,CAKF,AALG1B,CAOA0B,EAAsBC,IAAAA,AAHzB,QAGyBA,CAAAA,QAPE,CAOFA,AAPGwH,CAU1B,CAHuBxH,EAGhB,EAHqC,CAGrC,CAL+D,GAGtE,AAEO,EAAA,KAFA8C,AARqC5C,UAUrC,IAFc,CAJkD,CACD,EAMrCsI,AAAQrI,CAVrCD,AAUqCC,GAAAA,CAAU,GAAVA,CAFzC,AAEmD,EAAA,SAT/CA,CAS+C,OAAA,MAAA,GAAA,KAAA,EAAA,GAAA,QAAA,EAAA,GAAA,QAAA,CAAA,EAAA,GAAA,KA+BnDiI,KA5BUtO,EAANkN,EAAmB0B,EAAAA,EAAb5O,AAAkB,CAAA,aAAA,CAAA,UACxB6O,MACA9J,IADU,CAAC,IACFsB,IACTgH,GACF,KADUhH,KACV,EAAA,SAAA,CAAA,QAAA,CACF,WAAA,GACF,sCAEA,GACA,kBAAA,SAAA,EAAA,MACA,EASgB,WAVqD,IAUrD,CAXoD,CAYlEmB,oBAGF,AAb2D,CAWzDwB,EAEF,GAAA,CAAA,EAAA,EAAA,sBAAA,EAAA,IAAA,IACF,GAEMuF,OAAiB,GAAA,CALnBvF,CAK0BxB,CAAAA,QAAAA,AAyCxBsH,GAvCQlI,OAAV0H,EAAU1H,GAqPCmI,IArPDnI,QAGNY,EAIJjD,OADAiK,GAAWpQ,IAAAA,EAHPoJ,AAGyB,IAARpG,QAAQ,CAC7BmD,CAEApC,EAIF,GAHEiC,CAGF,EAAA,IAAA,IAAA,QAAA,EAAA,GAOA,GAPA,AAOA,CAAA,GAAA,SAAA,EAEA,EAFA,IAEA,CAFA,AAGInD,QAAY8E,KAAK,CAAE,AACjBuB,KAAS,CAAC,KAAA,EAChB,SADiC,GACjC,CAEKwH,AAL+C,EAM9ClI,MAAAA,CADW,AAEb,KADe,AACf,EAAA,eAAA,CAAA,KAAA,CACA,KAAA,EAAA,OAAA,CAAA,KAAA,CACA,SAAA,CAAA,CAFgE,CAGhE,aAAA,EACA,YAHoE,AAGpE,CACA,MAAM,CAER,EAAO,GAHoB,AAGpB,IAFC,CAED,CAAA,EAAA,CAL6D,CAK7D,KAF+D,CAA9D,IAAI+F,CAEL,GAAA,EAAA,AAFW,CAFmD,CAI9D,wBAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,mBAFC,GAED,EAAA,IAAA,KAGT,IAAImC,EAAAA,CAAAA,AALM,EAKNA,UAAAA,AAE2DA,QAD7D,GADa7B,GACP,EADY,mBAGjB,CAFK,CADJ6B,AAGF,GAFUnC,CAAJ,EAEN,GADE,CAAC,IADG,AAGR,EAAA,EAJsBxL,AAgElB,EAyDEiB,EAxHE,AADkB,AAgElB,AAmFR,CAnFSA,IAAI+M,CAhEkBtP,EAMzBoP,EAAAA,CAAc,GA0DE,AAqBhB5C,CArBiB,CA1DH,EAAOyC,CAAW7B,GANS7L,EAMJ,CAAC4H,IA+EvB,CArFkC,EAMXA,AANa,CAMbA,AA0DH,CAvDvCpE,AAHmD,KAAK,IAIxD,CAR2D,EAS3D,CAT6DkK,iBAS7D,GAAA,CAT6DA,CAS7D,MACA,EACCxI,EAXuE2G,CAWvE3G,CAAAA,AAGG,CAACzD,EAdwE,IAe3E,CANgE,AAGjE,CAAA,CAACoM,GAGA,CADgB,CAChB,SAf2DH,AAe3D,CAHe5J,AAGf,KAL8C,GAK9C,CAPuE,SARM/D,EAY3C,EAZ+C,CAanF,CAbqF,GAD/E,IAgB4C,GAChD,GACAiB,IAAIkF,OAlBA,EAkBS,CACX,OASJ,SAXmC,EAG/B/C,EASJ,qBARQ,AASR,EACAnC,IAAIkF,MAAAA,EAAS,AAAC9H,CAAAA,CATNsP,OASMtP,AAChB,IAVqB0P,EAWrB,EAAM,CAEN,CAb2B,AAWnBjC,CAER,EAZY,GAQ8B,CAE3B8B,EAAAA,CAEf,CAAA,CAXYD,KASa,EAAE,CAJiD,EAI9CA,CATPX,CAMoC,GAK3D,GAX8B,GAChB,UACA,GASwC,wCAItD,EAAA,KAAA,EAAA,AACI/H,EAAAA,SAAAA,CAAAA,CADgC,GACd,YAAA,gCACHqG,CAAAA,EAAY,CAAGiC,GAYkB,KAZVrI,CAYU,IAZVA,GAYU,cAAA,CAAA,MAAA,qDAAA,oBAAA,CACxCpF,MAAAA,KAAY8E,CACtB,IAD2B,EAAE,MAC7B,EACI/B,SAAa,KAAA,CACfqI,WAAgCqC,IAAjB,GACjB,CAD0CrI,AAC1C,AAIiB,GALmC,AAFO,IAG3D,EAIiB,EAAA,CAAZ,IAAY,AAAR,CAACzB,CAAO,KAAA,CAAA,CAAA,EAAA,IAAA,IAAA,EAAA,eAAA,CAAA,QAAA,EAAA,OAEbyH,KAAAA,UAAe,IAAA,CAAA,MAAA,CAAA,wDAAA,EAAA,OAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,IAAA,CAAA,CAAA,EAAA,oBAAA,QAAEI,YAAY,EAAGiC,IAAAA,IAAQrI,EAAU,UAAA,KACpD,KAEA,UAAA,OAAA,EAAA,GAAwE,EAAxE,CAAA,SAAA,KACA,KAAA,CAEMyI,CAAAA,CAAWzC,EAAaI,EAA5B,AAA4C,CAAA,GAAA,AAAxCqC,GAAkC,CAFpB,AAES,CAACrC,CAAa,CACvC,CADEqC,CAAwC,IACpC,cAAA,KAAA,EAEL,CAFK,IAAInC,MACR,CAAC,GADG,EAAA,MAAA,CAAA,IAHU,GAGV,EAAA,OAAA,CAAA,QAAA,MACwC,EAAEmC,SAKhDrC,CAAAA,CAAAA,AAL2DJ,EAKpCA,QAAXyC,EAL2D,CAACrC,QAKjDJ,EAL2D,CAAC,EAK5DA,CAAAA,CALgE,CAAC,GADlF,EAM6B,CAACI,MAEtC,EAAA,CAAA,CAFgD,AAEhD,CAAA,OARQ,GAcV,CACF,CADE,CADiE,SAEnE,CAFmE,CAGrE,YAAA,CAEAqC,OAGE,AAHSzC,GAGF9F,GAAAA,IAA0B,CAAA,CAHZ,GAIrBwI,AAJwB1C,EAGS,AACjC0C,CAAAA,EAiBaA,CAdb,CAcaA,MAjBbA,IAGA,EAHAA,AAIA,KAJY5N,IAAI,GAIhB,CACA,EALqBtB,KAOrB,GAAA,CAAA,EAAA,KAAA,AAPqCuB,CASrC,CAFA,EAEA,EACA,EAAA,AAV6C,CAW7C,GAVA2N,KAQA,GAEA,EARuE,AASvE,CAXWzB,WAWX,AAXsB,CAYlBhG,CAXJ,GAEsE,GAWtE,CARoE,CAMvD,CAAC7H,AAEd,CAAA,GAQI4P,GARJ,AAQIA,AAlBkE,EAkBlEA,CAAmBhJ,IAb+C,OAapC,EAAA,EAG9BlE,AAfkE,CAE9B,CAJgC,EAGhB,MAcpDA,OAAAA,EAAAA,YAAAA,CAAAA,CAXkE,SAWlEA,CAAAA,CAEAmN,GAAAA,EAAelL,WAAWkL,CAAAA,CAAAA,UAAAA,CAAa,EACvCC,CADuC,KACvCA,OAAiBnL,WAAWmL,GAAAA,CAAAA,MAAAA,CAAe,2CAAA,EAAA,EAAA,YAAA,CAAA,UAAA,CAAA,IAAA,CAAA,EAAA,oBAAA,CACnCvP,MAAAA,MAAawP,AAIrBnD,MAAcyC,IAJiB,CAC7BO,CAGYP,EAChB,GAD2BzC,UAFvB3M,CAGJ,CADuC,AAEzC,GAGA,EAAA,CACA,WAAA,EAAA,YAAA,CAAA,UAAA,CACA,OAAA,CAAA,AAAqE,GADC,CADG,EAEzE,GAAA,EAAA,SAAqE,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GAAA,UAAA,AACrE,CACA,MACIsD,CADJ,CACiB,CACV3C,GADO,GAAG,KACO,EAAA,MAFQ,QAER,CACtB8B,YAAAA,CACAC,KAEAmN,EAjCF,EA0BoE,AA1BpE,SAAA,CAAA,GAiCmBnL,WAAWmL,IAjC9B,CACMH,EAAOL,CACTlM,CAF0C,EACjCkM,IACMnK,AA+B0B,IA/B1BA,EADNmK,AAEPzH,EADsB8H,GACb,CAACjP,IADoB,CADZ4E,CAER5E,EAChB,GAF2CiP,CADZ,GAkC7B/C,KAjCkD,CAiClDA,KAAcyC,CAAAA,CAAAA,AAhCwBM,EAiCxC,AAlC8D,GADjDL,EAkCc1C,KAC3B,OADuC,AACvC,IAAA,CAAA,CAnCiC,CAAClM,MAmClC,KAAA,EAAA,EAAA,IAAA,IAAA,AAnCyD,EAmCzD,eAAA,CAAA,QAAA,EAAA,EAAA,WAAA,CAAA,OAaM,GAAG2O,EAAAA,CAAAA,EAAgB,MAAL7B,KAAK,aAAA,CAAA,KAGvB,GACA,CAAA,EAAA,MAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,CAAA,CAAA,EAAA,sBAAA,CAAA,CACEnE,GAAKtK,EAAAA,EAAe2D,CAAK,AAALA,EAAK,UAAA,OAAA,GAC3B,EAAA,SAAA,CAAA,EAAA,sBAAA,CAAA,OAGA,EAAA,EAAA,WAAA,CAA0C,GAAA,CAAA,WAC1C,KAAO,EAAA,IAEX,CAAA,EAAA,EAFW,AAEX,gBAAA,EAAA,KAEA,MACA,EACI8M,EADY,KACG7I,OAAAA,GAAkB,OAAA,MAAA,CAC7B,gBAAA,CAH4D,CAKjE,CAFK,AAAIuG,EACR,EADQA,WACR,IADI,IAAA,EAAA,OAAA,CAAA,UAAA,CAAA,EAAA,EAAA,uBAAA,IAAA,MAAA,KAAA,EAAA,QAAA,IAAA,MASJ,OAAO5H,CATH,EASGA,CAAAA,CAAO,CAAC5E,EACjB,CAAA,EAAA,EAAA,gBADwC,AACxC,EAAA,KAEA,CAAK,IAAI,CAACwP,AACR,EAEA,EAFI,CADS1C,CAGT6C,KAHe,AACR7C,CAED8C,GAHaH,CAGbG,EAAO,CAAC9C,AAAQ,EAFL,CADS4C,OAAO,CAAC9K,EAGZ,EAFQ,GAGhC,EAJ8C,GAIzC,MAAMiL,CAAAA,GAAK/C,AAAO,MAAA,SAAA,QACrB7K,EAAI6N,EAAAA,KAAAA,CAAAA,GAAY,CAACN,CAAAA,IAAKK,CACxB,SAAA,EAAA,YAAA,IACF,MAIMC,CAJC,AAIDA,EAAAA,CAAJ7N,CAJS,AACT6K,AAGsBA,GAAlBgD,EAAY,CAACN,CAJD1C,CACRA,GAGcA,GAAAA,AAHRiD,EAGQjD,CAJI,CAIJA,IAHA,KADc,aAMxC,CADE,KACF,EAAA,CACF,EAFI,CAEJ,CAAA,CAIMmC,MAAOL,CACTlM,GAAAA,EAAe+B,EAASwK,AAATxK,GAASwK,CACtB9H,IAD8B,CACrB,AAACnH,IAFH4O,EAGb,AAF2CK,CAI3C,EAAA,CACA,IAAA,CANwBrK,AAMxB,AALoD,EAKpD,EAAA,GAN+B,EAESqK,CADsB,QAK9D,EAAA,EAAA,MANaL,IAOb,GAGA,OAAA,KAViC,AAsBjC,CAtBkC5O,EAsBlC,GAAA,GACI8O,KAlBsE,CAkBtEA,CAjBsE,CACtC,KAgBnB,EAvBwC,AAsBzD,CAAsC,WACrB,CAAA,MAAA,wEAAA,oBAAA,CACX3H,MAAAA,EAAS,CAAC7H,IAChB,YAAA,EAEA,QAH0C,MAG1C,CACA,GAEA,GAAA,EAAA,OAAA,CAAA,CACI0F,IAAAA,EAAgB,AADW,CACVnB,AACnB,GAAA,EAAA,OAAA,AACA,AANyD,CAIzB,GAE5B,OAAO+K,MACT,AACQ,GADJA,AAAW/F,EADKmE,KACI,CACtB,AAP8D,CAKrC,AACD,EAAXnE,AACb,CADaA,AACP,CAAA,CAAA,AAFwB,CAEpB2D,EAHgD,UACf,EAEqB,CAA1D,IAAIA,GAAAA,CAAAA,CAAJ,GAAU,IAAV,OAAA,CAAA,SAAA,IAAA,QAAyD,IAAzD,EAAyD,OAAA,CAAA,GAAzD,AACR,IAAA,CADiE,GACjE,KAAA,EAEOtM,EAAAA,EAFP,EADQ,QAGgB,CAAA,EAAA,OAEtB+B,UAAAA,OAAAA,IACAkN,EAAAA,EAAAA,CAAelL,OAAAA,EAAAA,EAGf,CAH0BkL,CAG1B,YAHuC,AAGvC,CAAA,EAAA,SAMkB,KAHlB,IAGM7C,AAAY,EAAA,OAAA,EAAA,CAAA,GAHC,CAGD,EANwC,AAMxC,CAAA,CAAA,EAAA,sBAAA,CAAA,OAAGiC,IAAQrI,CAAAA,EAAAA,EAARqI,QAAQrI,OAAAA,SAAU,IACnCyI,CAAAA,CAAAA,EAAuB,OAAZzC,YAAY,GAAA,CAAA,IAM/B,EAAOhM,KAAAA,CAAAA,EAAAA,CAAiB,CAAjBA,EAAiB,OACtB8B,KADsB,KAAA,AACtBA,CAAAA,EADsB,AACtBA,MAAAA,MAGAoN,EAAiBnL,GAAAA,EAAWmL,CAAAA,EAAAA,EAAe,QAAA,UAAA,CAAA,EAAA,MAAA,CAAA,EAAA,OAC3CnD,OAD2C,CACnCpM,EAAAA,CAAAA,GAAAA,EAMZ,GAEA,CARyBwP,CAQzB,QAFA,CANmC,AAQnC,CAPMT,AAON,EAAmC,SAPlB5B,MAOkB,CAPX,EAClBzN,MAM6B,CAAA,KAOjC,IAAA,CAAA,EAAA,CAEA,GAAA,AAA6B,SAA7B,EAAA,OAA6B,CAAA,CAE3BmC,GAAAA,EAAYuO,EAAJtO,GAAG,CAACsO,GAAAA,CAKZ,CALYA,EAAgB,AAJ0C,GAStE,CAJAvN,MAIA,SAHA+C,KAGA,CAAA,MAAA,SAFAuK,KAAKE,WAAW,CAEoD,IAF/CnQ,mBAE+C,OADpE,aACoE,CACpE,MAAA,OACA,YAAA,EACKoQ,IAAO,CAACC,SAAAA,CACf,GAGEpO,MAAAA,CAAAA,EAAAA,EAAAA,KANsE,WAMtEA,CALoE,CAKpEA,KACAC,MACAkN,EACAC,SADenL,IACEA,CAAAA,GAAWmL,GADFD,GACEC,OAAe,CAC3CnD,EAFuC,EAE/B+D,YAAAA,GAAAA,eAAAA,CACR9D,OAAAA,EAAcyC,EAAWzC,EAAAA,CAO7B,SAPyC,IAOzC,EAA4B,CAAA,CACxBpG,UAAsBC,CAAAA,EACxB,YAAA,CACA,EAAA,EAAA,GAFgD,SAEhD,AACAiK,CAAKK,IAAI,CACP,AACEE,CAGA,EAAA,CAJED,AAIF,EAAA,CAHME,CAGN,EAN+C,OAG/B,EADC,KAH8C,AAO/D,EAAA,KACF,MAGF,EACExO,CADK9B,aACL8B,GAAAA,CADsB,YACtBA,CACAC,gBAAAA,GAAAA,eAAAA,CACAkN,OAAAA,EAAelL,KAAAA,EAAAA,CAAAA,KAAWkL,KAAAA,CAAAA,EAAa,KAAA,EAAA,CAAA,EAAA,uBAAA,EACvCC,aAAAA,EAAiBnL,CAAAA,EAAWmL,SAAAA,IAC5BnD,EAD2C,IAE3CC,AAA+BqC,CAAQrI,CAD/B8J,GAC+B9J,CAI3C,EAJ2CA,CAI3C,CAAA,GAAA,CAJkB,EAIlB,GAWA8J,CAAKK,IAAI,CAACQ,CAAAA,EAAAA,EAXV,AAWsBE,KAAAA,WAAAA,EAAAA,EAAQ,GAE9B,AAbwE,MAcxE,EACA,cAAA,GAAA,aAAA,CACAnI,CAAS,eAAA,GAAA,MAH+D,AAEC,MADD,GAE/D,CACPvB,OAAAA,EACAwB,OAAW+F,MAAAA,EAAW/F,EAAAA,AAAS,UAAA,AAC/B,MAMU,KAAN,IAA8D,CAAxD,CAAA,GAAI2D,MAAM,IAAA,KAAV,OAAA,CAAuD,MAAA,CAAA,EAC/D,EAAA,OAAA,CAAA,EAAA,MAPoE,IAM5D,EACR,CAAA,MAAA,CAAA,WADQ,EACR,EAEIP,EAAAA,GAAAA,EAAAA,KAAOa,CAEqCb,CAD9C,GADc,EACR,CAAA,KAAA,UAAA,EAAA,CADJA,GAGD,CAFK,IAAIO,IAEV,EADE,AAFcxL,CAEb,GAFiB,EACd,IADmBtB,EAGzB,EAFM,CAEN,WAHyCuB,EAGzC,CACF,KAJmD,EAAE,MAEP,GAAEgL,AAEhD,GAAA,cAFgDA,CAEhD,CAEA,KAJuDa,EAIvD,EACA,CAL4D,CAKtDb,OAAOa,IAAK,CAACC,AAEbhB,IAFiB,CAACkF,GALwBhF,GAKlB,AAExBF,CAFyB8E,CAG/B,IAJ6C,MAJiB7P,CAKnBkQ,CAG3C,CACA,CATkE,AAUlEL,EAVoE,GAKjB,AAN3C,EAuBV,EAAA,GAZcK,CAYd,OAZsB,CAACE,KAAK,AAXlB,CAWmBrF,EA2DrC,GA3D0CoF,KAAK,CAavC,AAbwC,CAACE,CAazC,EAAA,CAAA,EAAA,EAfmE,MAenE,AAd4D,IAeX,EAAA,IACnD,CAFuC,CADmC,AAI5E,UAAA,EAAA,SAAA,CAIItK,QAAY,YAAA,IACd,GAAA,GAAMqH,CAAAA,CAAAA,MAAAA,MAAerH,EAChB,EAeP,EAdE,GAAO,CAAA,EAIDyK,EAJO1K,IAAAA,AAIP0K,GAJcF,CAIJ,GAAGzK,OAAO,CAAC,EAAE7E,IAAI2G,CAAAA,AAAK,EAJG,AAIL,CAJM3G,GAIJ,CAJQ4C,OAAO,EAAE,IACrDkC,OAAOyK,KAAK,CACVjT,eAAe+J,KAEmB,QAFN,EAC5B,UACkC,CAChCrH,EAAM5C,IAAAA,IAASqT,GACfC,GADqB,KACT,IAAA,EACV,cAAA,CAAe7K,GAGnB,CAFI,EAGJuH,CAAAA,MAAAA,GAAAA,EAAAA,CAHmBpM,IAAI2G,AAGvByF,EAAAA,CAH0B,IAG1BA,EAAAA,EAAAA,IAAAA,IAAAA,EAAAA,eAAAA,CAAAA,QAAAA,CAIM,CAJNA,KAIM,OAAA,cAAA,CAAA,MAAA,CAAA,yCAAA,EAAA,OAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,IAAA,CAAA,CAAA,EAAA,oBAAA,CACNrC,KAAe5L,CAAAA,OACbW,MAD2B,AACfgL,GADmB,GACnBA,EAId6F,IAAY,EAJgB,CAC9B3P,KACA+J,EAEc,CACZ6F,EAFF,IAKIlI,CAHStH,EAGTsH,EAAAA,KAAcjF,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,EAAAA,QAAAA,SACdL,CAAAA,IAKR,EAAA,QAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA,IAEA,QAAA,KAAA,CAAA,yBAAmD,IAAA,EAC7C2H,EACR,GACF,CAAA,EAAA,EAAA,gBAAA,EAAA,CAEA,UACA,mDAD6E,0BASvEyE,OAAWC,MAAO,CAChB,AAEFD,GAAWI,CAFLmB,IAEU,GAAA,EAClB,KAHsBC,EAGtB,IAH4B,CAAC,CAI/B,CACF","ignoreList":[0]}