{"version":3,"sources":["turbopack:///[project]/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport type { IncomingMessage, ServerResponse } from 'node:http'\n\nimport {\n  AppPageRouteModule,\n  type AppPageRouteHandlerContext,\n} from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\n\nimport { RouteKind } from '../../server/route-kind' with { 'turbopack-transition': 'next-server-utility' }\n\nimport { getRevalidateReason } from '../../server/instrumentation/utils'\nimport { getTracer, SpanKind, type Span } from '../../server/lib/trace/tracer'\nimport { getRequestMeta } from '../../server/request-meta'\nimport { BaseServerSpan } from '../../server/lib/trace/constants'\nimport { interopDefault } from '../../server/app-render/interop-default'\nimport { stripFlightHeaders } from '../../server/app-render/strip-flight-headers'\nimport { NodeNextRequest, NodeNextResponse } from '../../server/base-http/node'\nimport { checkIsAppPPREnabled } from '../../server/lib/experimental/ppr'\nimport {\n  getFallbackRouteParams,\n  type FallbackRouteParams,\n} from '../../server/request/fallback-params'\nimport { setReferenceManifestsSingleton } from '../../server/app-render/encryption-utils'\nimport {\n  isHtmlBotRequest,\n  shouldServeStreamingMetadata,\n} from '../../server/lib/streaming-metadata'\nimport { createServerModuleMap } from '../../server/app-render/action-utils'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { getIsPossibleServerAction } from '../../server/lib/server-action-request-meta'\nimport {\n  RSC_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n} from '../../client/components/app-router-headers'\nimport { getBotType, isBot } from '../../shared/lib/router/utils/is-bot'\nimport {\n  CachedRouteKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type ResponseCacheEntry,\n  type ResponseGenerator,\n} from '../../server/response-cache'\nimport { FallbackMode, parseFallbackField } from '../../lib/fallback'\nimport RenderResult from '../../server/render-result'\nimport {\n  CACHE_ONE_YEAR,\n  HTML_CONTENT_TYPE_HEADER,\n  NEXT_CACHE_TAGS_HEADER,\n} from '../../lib/constants'\nimport type { CacheControl } from '../../server/lib/cache-control'\nimport { ENCODED_TAGS } from '../../server/stream-utils/encoded-tags'\nimport { sendRenderResult } from '../../server/send-payload'\nimport { NoFallbackError } from '../../shared/lib/no-fallback-error.external'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nimport GlobalError from 'VAR_MODULE_GLOBAL_ERROR' with { 'turbopack-transition': 'next-server-utility' }\n\nexport { GlobalError }\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: (id: string | number) => unknown\ndeclare const __next_app_load_chunk__: (id: string | number) => Promise<unknown>\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nimport * as entryBase from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\n\nexport * from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n  distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n  relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n})\n\nexport async function handler(\n  req: IncomingMessage,\n  res: ServerResponse,\n  ctx: {\n    waitUntil: (prom: Promise<void>) => void\n  }\n) {\n  let srcPage = 'VAR_DEFINITION_PAGE'\n\n  // turbopack doesn't normalize `/index` in the page name\n  // so we need to to process dynamic routes properly\n  // TODO: fix turbopack providing differing value from webpack\n  if (process.env.TURBOPACK) {\n    srcPage = srcPage.replace(/\\/index$/, '') || '/'\n  } else if (srcPage === '/index') {\n    // we always normalize /index specifically\n    srcPage = '/'\n  }\n  const multiZoneDraftMode = process.env\n    .__NEXT_MULTI_ZONE_DRAFT_MODE as any as boolean\n\n  const initialPostponed = getRequestMeta(req, 'postponed')\n  // TODO: replace with more specific flags\n  const minimalMode = getRequestMeta(req, 'minimalMode')\n\n  const prepareResult = await routeModule.prepare(req, res, {\n    srcPage,\n    multiZoneDraftMode,\n  })\n\n  if (!prepareResult) {\n    res.statusCode = 400\n    res.end('Bad Request')\n    ctx.waitUntil?.(Promise.resolve())\n    return null\n  }\n\n  const {\n    buildId,\n    query,\n    params,\n    parsedUrl,\n    pageIsDynamic,\n    buildManifest,\n    nextFontManifest,\n    reactLoadableManifest,\n    serverActionsManifest,\n    clientReferenceManifest,\n    subresourceIntegrityManifest,\n    prerenderManifest,\n    isDraftMode,\n    resolvedPathname,\n    revalidateOnlyGenerated,\n    routerServerContext,\n    nextConfig,\n    interceptionRoutePatterns,\n  } = prepareResult\n\n  const pathname = parsedUrl.pathname || '/'\n  const normalizedSrcPage = normalizeAppPath(srcPage)\n\n  let { isOnDemandRevalidate } = prepareResult\n\n  const prerenderInfo = routeModule.match(pathname, prerenderManifest)\n  const isPrerendered = !!prerenderManifest.routes[resolvedPathname]\n\n  let isSSG = Boolean(\n    prerenderInfo ||\n      isPrerendered ||\n      prerenderManifest.routes[normalizedSrcPage]\n  )\n\n  const userAgent = req.headers['user-agent'] || ''\n  const botType = getBotType(userAgent)\n  const isHtmlBot = isHtmlBotRequest(req)\n\n  /**\n   * If true, this indicates that the request being made is for an app\n   * prefetch request.\n   */\n  const isPrefetchRSCRequest =\n    getRequestMeta(req, 'isPrefetchRSCRequest') ??\n    req.headers[NEXT_ROUTER_PREFETCH_HEADER] === '1' // exclude runtime prefetches, which use '2'\n\n  // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n\n  const isRSCRequest =\n    getRequestMeta(req, 'isRSCRequest') ?? Boolean(req.headers[RSC_HEADER])\n\n  const isPossibleServerAction = getIsPossibleServerAction(req)\n\n  /**\n   * If the route being rendered is an app page, and the ppr feature has been\n   * enabled, then the given route _could_ support PPR.\n   */\n  const couldSupportPPR: boolean = checkIsAppPPREnabled(\n    nextConfig.experimental.ppr\n  )\n\n  // When enabled, this will allow the use of the `?__nextppronly` query to\n  // enable debugging of the static shell.\n  const hasDebugStaticShellQuery =\n    process.env.__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING === '1' &&\n    typeof query.__nextppronly !== 'undefined' &&\n    couldSupportPPR\n\n  // When enabled, this will allow the use of the `?__nextppronly` query\n  // to enable debugging of the fallback shell.\n  const hasDebugFallbackShellQuery =\n    hasDebugStaticShellQuery && query.__nextppronly === 'fallback'\n\n  // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n  // prerender manifest and this is an app page.\n  const isRoutePPREnabled: boolean =\n    couldSupportPPR &&\n    ((\n      prerenderManifest.routes[normalizedSrcPage] ??\n      prerenderManifest.dynamicRoutes[normalizedSrcPage]\n    )?.renderingMode === 'PARTIALLY_STATIC' ||\n      // Ideally we'd want to check the appConfig to see if this page has PPR\n      // enabled or not, but that would require plumbing the appConfig through\n      // to the server during development. We assume that the page supports it\n      // but only during development.\n      (hasDebugStaticShellQuery &&\n        (routeModule.isDev === true ||\n          routerServerContext?.experimentalTestProxy === true)))\n\n  const isDebugStaticShell: boolean =\n    hasDebugStaticShellQuery && isRoutePPREnabled\n\n  // We should enable debugging dynamic accesses when the static shell\n  // debugging has been enabled and we're also in development mode.\n  const isDebugDynamicAccesses =\n    isDebugStaticShell && routeModule.isDev === true\n\n  const isDebugFallbackShell = hasDebugFallbackShellQuery && isRoutePPREnabled\n\n  // If we're in minimal mode, then try to get the postponed information from\n  // the request metadata. If available, use it for resuming the postponed\n  // render.\n  const minimalPostponed = isRoutePPREnabled ? initialPostponed : undefined\n\n  // If PPR is enabled, and this is a RSC request (but not a prefetch), then\n  // we can use this fact to only generate the flight data for the request\n  // because we can't cache the HTML (as it's also dynamic).\n  const isDynamicRSCRequest =\n    isRoutePPREnabled && isRSCRequest && !isPrefetchRSCRequest\n\n  // Need to read this before it's stripped by stripFlightHeaders. We don't\n  // need to transfer it to the request meta because it's only read\n  // within this function; the static segment data should have already been\n  // generated, so we will always either return a static response or a 404.\n  const segmentPrefetchHeader = getRequestMeta(req, 'segmentPrefetchRSCRequest')\n\n  // TODO: investigate existing bug with shouldServeStreamingMetadata always\n  // being true for a revalidate due to modifying the base-server this.renderOpts\n  // when fixing this to correct logic it causes hydration issue since we set\n  // serveStreamingMetadata to true during export\n  let serveStreamingMetadata = !userAgent\n    ? true\n    : shouldServeStreamingMetadata(userAgent, nextConfig.htmlLimitedBots)\n\n  if (isHtmlBot && isRoutePPREnabled) {\n    isSSG = false\n    serveStreamingMetadata = false\n  }\n\n  // In development, we always want to generate dynamic HTML.\n  let supportsDynamicResponse: boolean =\n    // If we're in development, we always support dynamic HTML, unless it's\n    // a data request, in which case we only produce static HTML.\n    routeModule.isDev === true ||\n    // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isSSG ||\n    // If this request has provided postponed data, it supports dynamic\n    // HTML.\n    typeof initialPostponed === 'string' ||\n    // If this is a dynamic RSC request, then this render supports dynamic\n    // HTML (it's dynamic).\n    isDynamicRSCRequest\n\n  // When html bots request PPR page, perform the full dynamic rendering.\n  const shouldWaitOnAllReady = isHtmlBot && isRoutePPREnabled\n\n  let ssgCacheKey: string | null = null\n  if (\n    !isDraftMode &&\n    isSSG &&\n    !supportsDynamicResponse &&\n    !isPossibleServerAction &&\n    !minimalPostponed &&\n    !isDynamicRSCRequest\n  ) {\n    ssgCacheKey = resolvedPathname\n  }\n\n  // the staticPathKey differs from ssgCacheKey since\n  // ssgCacheKey is null in dev since we're always in \"dynamic\"\n  // mode in dev to bypass the cache, but we still need to honor\n  // dynamicParams = false in dev mode\n  let staticPathKey = ssgCacheKey\n  if (!staticPathKey && routeModule.isDev) {\n    staticPathKey = resolvedPathname\n  }\n\n  // If this is a request for an app path that should be statically generated\n  // and we aren't in the edge runtime, strip the flight headers so it will\n  // generate the static response.\n  if (\n    !routeModule.isDev &&\n    !isDraftMode &&\n    isSSG &&\n    isRSCRequest &&\n    !isDynamicRSCRequest\n  ) {\n    stripFlightHeaders(req.headers)\n  }\n\n  const ComponentMod = {\n    ...entryBase,\n    tree,\n    pages,\n    GlobalError,\n    handler,\n    routeModule,\n    __next_app__,\n  }\n\n  // Before rendering (which initializes component tree modules), we have to\n  // set the reference manifests to our global store so Server Action's\n  // encryption util can access to them at the top level of the page module.\n  if (serverActionsManifest && clientReferenceManifest) {\n    setReferenceManifestsSingleton({\n      page: srcPage,\n      clientReferenceManifest,\n      serverActionsManifest,\n      serverModuleMap: createServerModuleMap({\n        serverActionsManifest,\n      }),\n    })\n  }\n\n  const method = req.method || 'GET'\n  const tracer = getTracer()\n  const activeSpan = tracer.getActiveScopeSpan()\n\n  try {\n    const varyHeader = routeModule.getVaryHeader(\n      resolvedPathname,\n      interceptionRoutePatterns\n    )\n    res.setHeader('Vary', varyHeader)\n    const invokeRouteModule = async (\n      span: Span | undefined,\n      context: AppPageRouteHandlerContext\n    ) => {\n      const nextReq = new NodeNextRequest(req)\n      const nextRes = new NodeNextResponse(res)\n\n      // TODO: adapt for putting the RDC inside the postponed data\n      // If we're in dev, and this isn't a prefetch or a server action,\n      // we should seed the resume data cache.\n      if (process.env.NODE_ENV === 'development') {\n        if (\n          nextConfig.experimental.cacheComponents &&\n          !isPrefetchRSCRequest &&\n          !context.renderOpts.isPossibleServerAction\n        ) {\n          const warmup = await routeModule.warmup(nextReq, nextRes, context)\n\n          // If the warmup is successful, we should use the resume data\n          // cache from the warmup.\n          if (warmup.metadata.renderResumeDataCache) {\n            context.renderOpts.renderResumeDataCache =\n              warmup.metadata.renderResumeDataCache\n          }\n        }\n      }\n\n      return routeModule.render(nextReq, nextRes, context).finally(() => {\n        if (!span) return\n\n        span.setAttributes({\n          'http.status_code': res.statusCode,\n          'next.rsc': false,\n        })\n\n        const rootSpanAttributes = tracer.getRootSpanAttributes()\n        // We were unable to get attributes, probably OTEL is not enabled\n        if (!rootSpanAttributes) {\n          return\n        }\n\n        if (\n          rootSpanAttributes.get('next.span_type') !==\n          BaseServerSpan.handleRequest\n        ) {\n          console.warn(\n            `Unexpected root span type '${rootSpanAttributes.get(\n              'next.span_type'\n            )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n          )\n          return\n        }\n\n        const route = rootSpanAttributes.get('next.route')\n        if (route) {\n          const name = `${method} ${route}`\n\n          span.setAttributes({\n            'next.route': route,\n            'http.route': route,\n            'next.span_name': name,\n          })\n          span.updateName(name)\n        } else {\n          span.updateName(`${method} ${req.url}`)\n        }\n      })\n    }\n\n    const doRender = async ({\n      span,\n      postponed,\n      fallbackRouteParams,\n    }: {\n      span?: Span\n      /**\n       * The postponed data for this render. This is only provided when resuming\n       * a render that has been postponed.\n       */\n      postponed: string | undefined\n\n      /**\n       * The unknown route params for this render.\n       */\n      fallbackRouteParams: FallbackRouteParams | null\n    }): Promise<ResponseCacheEntry> => {\n      const context: AppPageRouteHandlerContext = {\n        query,\n        params,\n        page: normalizedSrcPage,\n        sharedContext: {\n          buildId,\n        },\n        serverComponentsHmrCache: getRequestMeta(\n          req,\n          'serverComponentsHmrCache'\n        ),\n        fallbackRouteParams,\n        renderOpts: {\n          App: () => null,\n          Document: () => null,\n          pageConfig: {},\n          ComponentMod,\n          Component: interopDefault(ComponentMod),\n\n          params,\n          routeModule,\n          page: srcPage,\n          postponed,\n          shouldWaitOnAllReady,\n          serveStreamingMetadata,\n          supportsDynamicResponse:\n            typeof postponed === 'string' || supportsDynamicResponse,\n          buildManifest,\n          nextFontManifest,\n          reactLoadableManifest,\n          subresourceIntegrityManifest,\n          serverActionsManifest,\n          clientReferenceManifest,\n          setIsrStatus: routerServerContext?.setIsrStatus,\n\n          dir:\n            process.env.NEXT_RUNTIME === 'nodejs'\n              ? (require('path') as typeof import('path')).join(\n                  /* turbopackIgnore: true */\n                  process.cwd(),\n                  routeModule.relativeProjectDir\n                )\n              : `${process.cwd()}/${routeModule.relativeProjectDir}`,\n          isDraftMode,\n          isRevalidate: isSSG && !postponed && !isDynamicRSCRequest,\n          botType,\n          isOnDemandRevalidate,\n          isPossibleServerAction,\n          assetPrefix: nextConfig.assetPrefix,\n          nextConfigOutput: nextConfig.output,\n          crossOrigin: nextConfig.crossOrigin,\n          trailingSlash: nextConfig.trailingSlash,\n          previewProps: prerenderManifest.preview,\n          deploymentId: nextConfig.deploymentId,\n          enableTainting: nextConfig.experimental.taint,\n          htmlLimitedBots: nextConfig.htmlLimitedBots,\n          devtoolSegmentExplorer:\n            nextConfig.experimental.devtoolSegmentExplorer,\n          reactMaxHeadersLength: nextConfig.reactMaxHeadersLength,\n\n          multiZoneDraftMode,\n          incrementalCache: getRequestMeta(req, 'incrementalCache'),\n          cacheLifeProfiles: nextConfig.experimental.cacheLife,\n          basePath: nextConfig.basePath,\n          serverActions: nextConfig.experimental.serverActions,\n\n          ...(isDebugStaticShell || isDebugDynamicAccesses\n            ? {\n                nextExport: true,\n                supportsDynamicResponse: false,\n                isStaticGeneration: true,\n                isRevalidate: true,\n                isDebugDynamicAccesses: isDebugDynamicAccesses,\n              }\n            : {}),\n\n          experimental: {\n            isRoutePPREnabled,\n            expireTime: nextConfig.expireTime,\n            staleTimes: nextConfig.experimental.staleTimes,\n            cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n            clientSegmentCache: Boolean(\n              nextConfig.experimental.clientSegmentCache\n            ),\n            clientParamParsing: Boolean(\n              nextConfig.experimental.clientParamParsing\n            ),\n            dynamicOnHover: Boolean(nextConfig.experimental.dynamicOnHover),\n            inlineCss: Boolean(nextConfig.experimental.inlineCss),\n            authInterrupts: Boolean(nextConfig.experimental.authInterrupts),\n            clientTraceMetadata:\n              nextConfig.experimental.clientTraceMetadata || ([] as any),\n          },\n\n          waitUntil: ctx.waitUntil,\n          onClose: (cb) => {\n            res.on('close', cb)\n          },\n          onAfterTaskError: () => {},\n\n          onInstrumentationRequestError: (error, _request, errorContext) =>\n            routeModule.onRequestError(\n              req,\n              error,\n              errorContext,\n              routerServerContext\n            ),\n          err: getRequestMeta(req, 'invokeError'),\n          dev: routeModule.isDev,\n        },\n      }\n\n      const result = await invokeRouteModule(span, context)\n\n      const { metadata } = result\n\n      const {\n        cacheControl,\n        headers = {},\n        // Add any fetch tags that were on the page to the response headers.\n        fetchTags: cacheTags,\n      } = metadata\n\n      if (cacheTags) {\n        headers[NEXT_CACHE_TAGS_HEADER] = cacheTags\n      }\n\n      // Pull any fetch metrics from the render onto the request.\n      ;(req as any).fetchMetrics = metadata.fetchMetrics\n\n      // we don't throw static to dynamic errors in dev as isSSG\n      // is a best guess in dev since we don't have the prerender pass\n      // to know whether the path is actually static or not\n      if (\n        isSSG &&\n        cacheControl?.revalidate === 0 &&\n        !routeModule.isDev &&\n        !isRoutePPREnabled\n      ) {\n        const staticBailoutInfo = metadata.staticBailoutInfo\n\n        const err = new Error(\n          `Page changed from static to dynamic at runtime ${resolvedPathname}${\n            staticBailoutInfo?.description\n              ? `, reason: ${staticBailoutInfo.description}`\n              : ``\n          }` +\n            `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`\n        )\n\n        if (staticBailoutInfo?.stack) {\n          const stack = staticBailoutInfo.stack\n          err.stack = err.message + stack.substring(stack.indexOf('\\n'))\n        }\n\n        throw err\n      }\n\n      return {\n        value: {\n          kind: CachedRouteKind.APP_PAGE,\n          html: result,\n          headers,\n          rscData: metadata.flightData,\n          postponed: metadata.postponed,\n          status: metadata.statusCode,\n          segmentData: metadata.segmentData,\n        } satisfies CachedAppPageValue,\n        cacheControl,\n      } satisfies ResponseCacheEntry\n    }\n\n    const responseGenerator: ResponseGenerator = async ({\n      hasResolved,\n      previousCacheEntry,\n      isRevalidating,\n      span,\n    }) => {\n      const isProduction = routeModule.isDev === false\n      const didRespond = hasResolved || res.writableEnded\n\n      // skip on-demand revalidate if cache is not present and\n      // revalidate-if-generated is set\n      if (\n        isOnDemandRevalidate &&\n        revalidateOnlyGenerated &&\n        !previousCacheEntry &&\n        !minimalMode\n      ) {\n        if (routerServerContext?.render404) {\n          await routerServerContext.render404(req, res)\n        } else {\n          res.statusCode = 404\n          res.end('This page could not be found')\n        }\n        return null\n      }\n\n      let fallbackMode: FallbackMode | undefined\n\n      if (prerenderInfo) {\n        fallbackMode = parseFallbackField(prerenderInfo.fallback)\n      }\n\n      // When serving a HTML bot request, we want to serve a blocking render and\n      // not the prerendered page. This ensures that the correct content is served\n      // to the bot in the head.\n      if (fallbackMode === FallbackMode.PRERENDER && isBot(userAgent)) {\n        if (!isRoutePPREnabled || isHtmlBot) {\n          fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n        }\n      }\n\n      if (previousCacheEntry?.isStale === -1) {\n        isOnDemandRevalidate = true\n      }\n\n      // TODO: adapt for PPR\n      // only allow on-demand revalidate for fallback: true/blocking\n      // or for prerendered fallback: false paths\n      if (\n        isOnDemandRevalidate &&\n        (fallbackMode !== FallbackMode.NOT_FOUND || previousCacheEntry)\n      ) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      if (\n        !minimalMode &&\n        fallbackMode !== FallbackMode.BLOCKING_STATIC_RENDER &&\n        staticPathKey &&\n        !didRespond &&\n        !isDraftMode &&\n        pageIsDynamic &&\n        (isProduction || !isPrerendered)\n      ) {\n        // if the page has dynamicParams: false and this pathname wasn't\n        // prerendered trigger the no fallback handling\n        if (\n          // In development, fall through to render to handle missing\n          // getStaticPaths.\n          (isProduction || prerenderInfo) &&\n          // When fallback isn't present, abort this render so we 404\n          fallbackMode === FallbackMode.NOT_FOUND\n        ) {\n          throw new NoFallbackError()\n        }\n\n        let fallbackResponse: ResponseCacheEntry | null | undefined\n\n        if (isRoutePPREnabled && !isRSCRequest) {\n          const cacheKey =\n            typeof prerenderInfo?.fallback === 'string'\n              ? prerenderInfo.fallback\n              : isProduction\n                ? normalizedSrcPage\n                : null\n\n          // We use the response cache here to handle the revalidation and\n          // management of the fallback shell.\n          fallbackResponse = await routeModule.handleResponse({\n            cacheKey,\n            req,\n            nextConfig,\n            routeKind: RouteKind.APP_PAGE,\n            isFallback: true,\n            prerenderManifest,\n            isRoutePPREnabled,\n            responseGenerator: async () =>\n              doRender({\n                span,\n                // We pass `undefined` as rendering a fallback isn't resumed\n                // here.\n                postponed: undefined,\n                fallbackRouteParams:\n                  // If we're in production or we're debugging the fallback\n                  // shell then we should postpone when dynamic params are\n                  // accessed.\n                  isProduction || isDebugFallbackShell\n                    ? getFallbackRouteParams(normalizedSrcPage)\n                    : null,\n              }),\n            waitUntil: ctx.waitUntil,\n          })\n\n          // If the fallback response was set to null, then we should return null.\n          if (fallbackResponse === null) return null\n\n          // Otherwise, if we did get a fallback response, we should return it.\n          if (fallbackResponse) {\n            // Remove the cache control from the response to prevent it from being\n            // used in the surrounding cache.\n            delete fallbackResponse.cacheControl\n\n            return fallbackResponse\n          }\n        }\n      }\n      // Only requests that aren't revalidating can be resumed. If we have the\n      // minimal postponed data, then we should resume the render with it.\n      const postponed =\n        !isOnDemandRevalidate && !isRevalidating && minimalPostponed\n          ? minimalPostponed\n          : undefined\n\n      // When we're in minimal mode, if we're trying to debug the static shell,\n      // we should just return nothing instead of resuming the dynamic render.\n      if (\n        (isDebugStaticShell || isDebugDynamicAccesses) &&\n        typeof postponed !== 'undefined'\n      ) {\n        return {\n          cacheControl: { revalidate: 1, expire: undefined },\n          value: {\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.EMPTY,\n            pageData: {},\n            headers: undefined,\n            status: undefined,\n          } satisfies CachedPageValue,\n        }\n      }\n\n      // If this is a dynamic route with PPR enabled and the default route\n      // matches were set, then we should pass the fallback route params to\n      // the renderer as this is a fallback revalidation request.\n      const fallbackRouteParams =\n        pageIsDynamic &&\n        isRoutePPREnabled &&\n        (getRequestMeta(req, 'renderFallbackShell') || isDebugFallbackShell)\n          ? getFallbackRouteParams(pathname)\n          : null\n\n      // Perform the render.\n      return doRender({\n        span,\n        postponed,\n        fallbackRouteParams,\n      })\n    }\n\n    const handleResponse = async (span?: Span): Promise<null | void> => {\n      const cacheEntry = await routeModule.handleResponse({\n        cacheKey: ssgCacheKey,\n        responseGenerator: (c) =>\n          responseGenerator({\n            span,\n            ...c,\n          }),\n        routeKind: RouteKind.APP_PAGE,\n        isOnDemandRevalidate,\n        isRoutePPREnabled,\n        req,\n        nextConfig,\n        prerenderManifest,\n        waitUntil: ctx.waitUntil,\n      })\n\n      if (isDraftMode) {\n        res.setHeader(\n          'Cache-Control',\n          'private, no-cache, no-store, max-age=0, must-revalidate'\n        )\n      }\n\n      // In dev, we should not cache pages for any reason.\n      if (routeModule.isDev) {\n        res.setHeader('Cache-Control', 'no-store, must-revalidate')\n      }\n\n      if (!cacheEntry) {\n        if (ssgCacheKey) {\n          // A cache entry might not be generated if a response is written\n          // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n          // have a cache key. If we do have a cache key but we don't end up\n          // with a cache entry, then either Next.js or the application has a\n          // bug that needs fixing.\n          throw new Error('invariant: cache entry required but not generated')\n        }\n        return null\n      }\n\n      if (cacheEntry.value?.kind !== CachedRouteKind.APP_PAGE) {\n        throw new Error(\n          `Invariant app-page handler received invalid cache entry ${cacheEntry.value?.kind}`\n        )\n      }\n\n      const didPostpone = typeof cacheEntry.value.postponed === 'string'\n\n      if (\n        isSSG &&\n        // We don't want to send a cache header for requests that contain dynamic\n        // data. If this is a Dynamic RSC request or wasn't a Prefetch RSC\n        // request, then we should set the cache header.\n        !isDynamicRSCRequest &&\n        (!didPostpone || isPrefetchRSCRequest)\n      ) {\n        if (!minimalMode) {\n          // set x-nextjs-cache header to match the header\n          // we set for the image-optimizer\n          res.setHeader(\n            'x-nextjs-cache',\n            isOnDemandRevalidate\n              ? 'REVALIDATED'\n              : cacheEntry.isMiss\n                ? 'MISS'\n                : cacheEntry.isStale\n                  ? 'STALE'\n                  : 'HIT'\n          )\n        }\n        // Set a header used by the client router to signal the response is static\n        // and should respect the `static` cache staleTime value.\n        res.setHeader(NEXT_IS_PRERENDER_HEADER, '1')\n      }\n      const { value: cachedData } = cacheEntry\n\n      // Coerce the cache control parameter from the render.\n      let cacheControl: CacheControl | undefined\n\n      // If this is a resume request in minimal mode it is streamed with dynamic\n      // content and should not be cached.\n      if (minimalPostponed) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      }\n\n      // If this is in minimal mode and this is a flight request that isn't a\n      // prefetch request while PPR is enabled, it cannot be cached as it contains\n      // dynamic content.\n      else if (\n        minimalMode &&\n        isRSCRequest &&\n        !isPrefetchRSCRequest &&\n        isRoutePPREnabled\n      ) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      } else if (!routeModule.isDev) {\n        // If this is a preview mode request, we shouldn't cache it\n        if (isDraftMode) {\n          cacheControl = { revalidate: 0, expire: undefined }\n        }\n\n        // If this isn't SSG, then we should set change the header only if it is\n        // not set already.\n        else if (!isSSG) {\n          if (!res.getHeader('Cache-Control')) {\n            cacheControl = { revalidate: 0, expire: undefined }\n          }\n        } else if (cacheEntry.cacheControl) {\n          // If the cache entry has a cache control with a revalidate value that's\n          // a number, use it.\n          if (typeof cacheEntry.cacheControl.revalidate === 'number') {\n            if (cacheEntry.cacheControl.revalidate < 1) {\n              throw new Error(\n                `Invalid revalidate configuration provided: ${cacheEntry.cacheControl.revalidate} < 1`\n              )\n            }\n\n            cacheControl = {\n              revalidate: cacheEntry.cacheControl.revalidate,\n              expire: cacheEntry.cacheControl?.expire ?? nextConfig.expireTime,\n            }\n          }\n          // Otherwise if the revalidate value is false, then we should use the\n          // cache time of one year.\n          else {\n            cacheControl = { revalidate: CACHE_ONE_YEAR, expire: undefined }\n          }\n        }\n      }\n\n      cacheEntry.cacheControl = cacheControl\n\n      if (\n        typeof segmentPrefetchHeader === 'string' &&\n        cachedData?.kind === CachedRouteKind.APP_PAGE &&\n        cachedData.segmentData\n      ) {\n        // This is a prefetch request issued by the client Segment Cache. These\n        // should never reach the application layer (lambda). We should either\n        // respond from the cache (HIT) or respond with 204 No Content (MISS).\n\n        // Set a header to indicate that PPR is enabled for this route. This\n        // lets the client distinguish between a regular cache miss and a cache\n        // miss due to PPR being disabled. In other contexts this header is used\n        // to indicate that the response contains dynamic data, but here we're\n        // only using it to indicate that the feature is enabled — the segment\n        // response itself contains whether the data is dynamic.\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '2')\n\n        // Add the cache tags header to the response if it exists and we're in\n        // minimal mode while rendering a static page.\n        const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n        if (minimalMode && isSSG && tags && typeof tags === 'string') {\n          res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n        }\n\n        const matchedSegment = cachedData.segmentData.get(segmentPrefetchHeader)\n        if (matchedSegment !== undefined) {\n          // Cache hit\n          return sendRenderResult({\n            req,\n            res,\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: RenderResult.fromStatic(\n              matchedSegment,\n              RSC_CONTENT_TYPE_HEADER\n            ),\n            cacheControl: cacheEntry.cacheControl,\n          })\n        }\n\n        // Cache miss. Either a cache entry for this route has not been generated\n        // (which technically should not be possible when PPR is enabled, because\n        // at a minimum there should always be a fallback entry) or there's no\n        // match for the requested segment. Respond with a 204 No Content. We\n        // don't bother to respond with 404, because these requests are only\n        // issued as part of a prefetch.\n        res.statusCode = 204\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.EMPTY,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If there's a callback for `onCacheEntry`, call it with the cache entry\n      // and the revalidate options.\n      const onCacheEntry = getRequestMeta(req, 'onCacheEntry')\n      if (onCacheEntry) {\n        const finished = await onCacheEntry(\n          {\n            ...cacheEntry,\n            // TODO: remove this when upstream doesn't\n            // always expect this value to be \"PAGE\"\n            value: {\n              ...cacheEntry.value,\n              kind: 'PAGE',\n            },\n          },\n          {\n            url: getRequestMeta(req, 'initURL'),\n          }\n        )\n        if (finished) {\n          // TODO: maybe we have to end the request?\n          return null\n        }\n      }\n\n      // If the request has a postponed state and it's a resume request we\n      // should error.\n      if (didPostpone && minimalPostponed) {\n        throw new Error(\n          'Invariant: postponed state should not be present on a resume request'\n        )\n      }\n\n      if (cachedData.headers) {\n        const headers = { ...cachedData.headers }\n\n        if (!minimalMode || !isSSG) {\n          delete headers[NEXT_CACHE_TAGS_HEADER]\n        }\n\n        for (let [key, value] of Object.entries(headers)) {\n          if (typeof value === 'undefined') continue\n\n          if (Array.isArray(value)) {\n            for (const v of value) {\n              res.appendHeader(key, v)\n            }\n          } else if (typeof value === 'number') {\n            value = value.toString()\n            res.appendHeader(key, value)\n          } else {\n            res.appendHeader(key, value)\n          }\n        }\n      }\n\n      // Add the cache tags header to the response if it exists and we're in\n      // minimal mode while rendering a static page.\n      const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n      if (minimalMode && isSSG && tags && typeof tags === 'string') {\n        res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n      }\n\n      // If the request is a data request, then we shouldn't set the status code\n      // from the response because it should always be 200. This should be gated\n      // behind the experimental PPR flag.\n      if (cachedData.status && (!isRSCRequest || !isRoutePPREnabled)) {\n        res.statusCode = cachedData.status\n      }\n\n      // Redirect information is encoded in RSC payload, so we don't need to use redirect status codes\n      if (\n        !minimalMode &&\n        cachedData.status &&\n        RedirectStatusCode[cachedData.status] &&\n        isRSCRequest\n      ) {\n        res.statusCode = 200\n      }\n\n      // Mark that the request did postpone.\n      if (didPostpone) {\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '1')\n      }\n\n      // we don't go through this block when preview mode is true\n      // as preview mode is a dynamic request (bypasses cache) and doesn't\n      // generate both HTML and payloads in the same request so continue to just\n      // return the generated payload\n      if (isRSCRequest && !isDraftMode) {\n        // If this is a dynamic RSC request, then stream the response.\n        if (typeof cachedData.rscData === 'undefined') {\n          if (cachedData.postponed) {\n            throw new Error('Invariant: Expected postponed to be undefined')\n          }\n\n          return sendRenderResult({\n            req,\n            res,\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: cachedData.html,\n            // Dynamic RSC responses cannot be cached, even if they're\n            // configured with `force-static` because we have no way of\n            // distinguishing between `force-static` and pages that have no\n            // postponed state.\n            // TODO: distinguish `force-static` from pages with no postponed state (static)\n            cacheControl: isDynamicRSCRequest\n              ? { revalidate: 0, expire: undefined }\n              : cacheEntry.cacheControl,\n          })\n        }\n\n        // As this isn't a prefetch request, we should serve the static flight\n        // data.\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.fromStatic(\n            cachedData.rscData,\n            RSC_CONTENT_TYPE_HEADER\n          ),\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // This is a request for HTML data.\n      let body = cachedData.html\n\n      // If there's no postponed state, we should just serve the HTML. This\n      // should also be the case for a resume request because it's completed\n      // as a server render (rather than a static render).\n      if (!didPostpone || minimalMode || isRSCRequest) {\n        // If we're in test mode, we should add a sentinel chunk to the response\n        // that's between the static and dynamic parts so we can compare the\n        // chunks and add assertions.\n        if (\n          process.env.__NEXT_TEST_MODE &&\n          minimalMode &&\n          isRoutePPREnabled &&\n          body.contentType === HTML_CONTENT_TYPE_HEADER\n        ) {\n          // As we're in minimal mode, the static part would have already been\n          // streamed first. The only part that this streams is the dynamic part\n          // so we should FIRST stream the sentinel and THEN the dynamic part.\n          body.unshift(createPPRBoundarySentinel())\n        }\n\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If we're debugging the static shell or the dynamic API accesses, we\n      // should just serve the HTML without resuming the render. The returned\n      // HTML will be the static shell so all the Dynamic API's will be used\n      // during static generation.\n      if (isDebugStaticShell || isDebugDynamicAccesses) {\n        // Since we're not resuming the render, we need to at least add the\n        // closing body and html tags to create valid HTML.\n        body.push(\n          new ReadableStream({\n            start(controller) {\n              controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n              controller.close()\n            },\n          })\n        )\n\n        return sendRenderResult({\n          req,\n          res,\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: { revalidate: 0, expire: undefined },\n        })\n      }\n\n      // If we're in test mode, we should add a sentinel chunk to the response\n      // that's between the static and dynamic parts so we can compare the\n      // chunks and add assertions.\n      if (process.env.__NEXT_TEST_MODE) {\n        body.push(createPPRBoundarySentinel())\n      }\n\n      // This request has postponed, so let's create a new transformer that the\n      // dynamic data can pipe to that will attach the dynamic data to the end\n      // of the response.\n      const transformer = new TransformStream<Uint8Array, Uint8Array>()\n      body.push(transformer.readable)\n\n      // Perform the render again, but this time, provide the postponed state.\n      // We don't await because we want the result to start streaming now, and\n      // we've already chained the transformer's readable to the render result.\n      doRender({\n        span,\n        postponed: cachedData.postponed,\n        // This is a resume render, not a fallback render, so we don't need to\n        // set this.\n        fallbackRouteParams: null,\n      })\n        .then(async (result) => {\n          if (!result) {\n            throw new Error('Invariant: expected a result to be returned')\n          }\n\n          if (result.value?.kind !== CachedRouteKind.APP_PAGE) {\n            throw new Error(\n              `Invariant: expected a page response, got ${result.value?.kind}`\n            )\n          }\n\n          // Pipe the resume result to the transformer.\n          await result.value.html.pipeTo(transformer.writable)\n        })\n        .catch((err) => {\n          // An error occurred during piping or preparing the render, abort\n          // the transformers writer so we can terminate the stream.\n          transformer.writable.abort(err).catch((e) => {\n            console.error(\"couldn't abort transformer\", e)\n          })\n        })\n\n      return sendRenderResult({\n        req,\n        res,\n        generateEtags: nextConfig.generateEtags,\n        poweredByHeader: nextConfig.poweredByHeader,\n        result: body,\n        // We don't want to cache the response if it has postponed data because\n        // the response being sent to the client it's dynamic parts are streamed\n        // to the client on the same request.\n        cacheControl: { revalidate: 0, expire: undefined },\n      })\n    }\n\n    // TODO: activeSpan code path is for when wrapped by\n    // next-server can be removed when this is no longer used\n    if (activeSpan) {\n      await handleResponse(activeSpan)\n    } else {\n      return await tracer.withPropagatedContext(req.headers, () =>\n        tracer.trace(\n          BaseServerSpan.handleRequest,\n          {\n            spanName: `${method} ${req.url}`,\n            kind: SpanKind.SERVER,\n            attributes: {\n              'http.method': method,\n              'http.target': req.url,\n            },\n          },\n          handleResponse\n        )\n      )\n    }\n  } catch (err) {\n    if (!(err instanceof NoFallbackError)) {\n      await routeModule.onRequestError(\n        req,\n        err,\n        {\n          routerKind: 'App Router',\n          routePath: srcPage,\n          routeType: 'render',\n          revalidateReason: getRevalidateReason({\n            isRevalidate: isSSG,\n            isOnDemandRevalidate,\n          }),\n        },\n        routerServerContext\n      )\n    }\n\n    // rethrow so that we can handle serving error page\n    throw err\n  }\n}\n\n// TODO: omit this from production builds, only test builds should include it\n/**\n * Creates a readable stream that emits a PPR boundary sentinel.\n *\n * @returns A readable stream that emits a PPR boundary sentinel.\n */\nfunction createPPRBoundarySentinel() {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(\n        new TextEncoder().encode('<!-- PPR_BOUNDARY_SENTINEL -->')\n      )\n      controller.close()\n    },\n  })\n}\n"],"names":["AppPageRouteModule","RouteKind","getRevalidateReason","getTracer","SpanKind","getRequestMeta","BaseServerSpan","interopDefault","stripFlightHeaders","NodeNextRequest","NodeNextResponse","checkIsAppPPREnabled","getFallbackRouteParams","setReferenceManifestsSingleton","isHtmlBotRequest","shouldServeStreamingMetadata","createServerModuleMap","normalizeAppPath","getIsPossibleServerAction","RSC_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_IS_PRERENDER_HEADER","NEXT_DID_POSTPONE_HEADER","RSC_CONTENT_TYPE_HEADER","getBotType","isBot","CachedRouteKind","FallbackMode","parseFallbackField","RenderResult","CACHE_ONE_YEAR","HTML_CONTENT_TYPE_HEADER","NEXT_CACHE_TAGS_HEADER","ENCODED_TAGS","sendRenderResult","NoFallbackError","tree","pages","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","entryBase","RedirectStatusCode","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree","distDir","process","env","__NEXT_RELATIVE_DIST_DIR","relativeProjectDir","__NEXT_RELATIVE_PROJECT_DIR","handler","req","res","ctx","prerenderManifest","srcPage","TURBOPACK","replace","multiZoneDraftMode","__NEXT_MULTI_ZONE_DRAFT_MODE","initialPostponed","minimalMode","prepareResult","prepare","statusCode","end","waitUntil","Promise","resolve","buildId","query","params","parsedUrl","pageIsDynamic","buildManifest","nextFontManifest","reactLoadableManifest","serverActionsManifest","clientReferenceManifest","subresourceIntegrityManifest","isDraftMode","resolvedPathname","revalidateOnlyGenerated","routerServerContext","nextConfig","interceptionRoutePatterns","normalizedSrcPage","isOnDemandRevalidate","prerenderInfo","match","isPrerendered","routes","isSSG","Boolean","userAgent","headers","botType","isHtmlBot","isPrefetchRSCRequest","isRSCRequest","isPossibleServerAction","couldSupportPPR","experimental","ppr","hasDebugStaticShellQuery","__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING","__nextppronly","hasDebugFallbackShellQuery","isRoutePPREnabled","dynamicRoutes","renderingMode","isDev","experimentalTestProxy","isDebugStaticShell","isDebugDynamicAccesses","isDebugFallbackShell","minimalPostponed","undefined","isDynamicRSCRequest","segmentPrefetchHeader","serveStreamingMetadata","htmlLimitedBots","supportsDynamicResponse","shouldWaitOnAllReady","ssgCacheKey","staticPathKey","ComponentMod","serverModuleMap","method","tracer","activeSpan","getActiveScopeSpan","varyHeader","getVaryHeader","setHeader","invokeRouteModule","span","context","nextReq","nextRes","NODE_ENV","cacheComponents","renderOpts","warmup","metadata","renderResumeDataCache","render","finally","setAttributes","rootSpanAttributes","getRootSpanAttributes","get","handleRequest","console","warn","route","name","updateName","url","doRender","postponed","fallbackRouteParams","sharedContext","serverComponentsHmrCache","App","Document","pageConfig","Component","setIsrStatus","dir","NEXT_RUNTIME","join","cwd","isRevalidate","assetPrefix","nextConfigOutput","output","crossOrigin","trailingSlash","previewProps","preview","deploymentId","enableTainting","taint","devtoolSegmentExplorer","reactMaxHeadersLength","incrementalCache","cacheLifeProfiles","cacheLife","basePath","serverActions","nextExport","isStaticGeneration","expireTime","staleTimes","clientSegmentCache","clientParamParsing","dynamicOnHover","inlineCss","authInterrupts","clientTraceMetadata","onClose","cb","on","onAfterTaskError","onInstrumentationRequestError","error","_request","errorContext","onRequestError","err","dev","result","cacheControl","fetchTags","cacheTags","fetchMetrics","revalidate","staticBailoutInfo","Error","description","stack","message","substring","indexOf","value","html","rscData","flightData","status","segmentData","responseGenerator","hasResolved","previousCacheEntry","isRevalidating","isProduction","didRespond","writableEnded","render404","fallbackMode","fallback","PRERENDER","BLOCKING_STATIC_RENDER","isStale","NOT_FOUND","fallbackResponse","cacheKey","handleResponse","routeKind","isFallback","expire","PAGES","EMPTY","pageData","cacheEntry","cachedData","c","didPostpone","isMiss","getHeader","tags","matchedSegment","generateEtags","poweredByHeader","fromStatic","onCacheEntry","finished","key","Object","entries","Array","isArray","v","appendHeader","toString","body","__NEXT_TEST_MODE","contentType","unshift","createPPRBoundarySentinel","push","ReadableStream","start","controller","enqueue","CLOSED","BODY_AND_HTML","close","transformer","TransformStream","readable","then","pipeTo","writable","catch","abort","e","withPropagatedContext","trace","spanName","SERVER","attributes","routerKind","routePath","routeType","revalidateReason","TextEncoder","encode"],"mappings":"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","ignoreList":[0]}